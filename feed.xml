<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://hrishikeshh.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://hrishikeshh.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-17T05:03:34+00:00</updated><id>https://hrishikeshh.github.io/feed.xml</id><title type="html">blank</title><subtitle>Collections of my thoughts, work and notes. </subtitle><entry><title type="html">Evaluation metrics of Object Tracking Algorithms</title><link href="https://hrishikeshh.github.io/blog/2024/detection-tracking/" rel="alternate" type="text/html" title="Evaluation metrics of Object Tracking Algorithms"/><published>2024-08-01T00:00:00+00:00</published><updated>2024-08-01T00:00:00+00:00</updated><id>https://hrishikeshh.github.io/blog/2024/detection-tracking</id><content type="html" xml:base="https://hrishikeshh.github.io/blog/2024/detection-tracking/"><![CDATA[<hr/> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/video_traffic_2_retinanet_resnet50_fpn_v2_clip_RN50.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> </div> <div class="caption"> Object detection &amp; tracking demonstration. </div> <h3 id="detection-metrics">Detection Metrics</h3> <ul> <li>Mean Square Error: x, y, w, h</li> <li>L1-Loss</li> <li>IoU: Generally good for small target, Normalized [0 -&gt; 1].</li> </ul> <hr/> <h3 id="multiple-object-detection">Multiple Object Detection</h3> <ul> <li> <p><strong>Hungarian Matching</strong> (<em>a.k.a. Bipartite Matching</em>)</p> <ul> <li>maximize over all IoU</li> <li>1 to 1 match</li> <li>Throw away matches with IoU &lt; 0.5.</li> <li>Remaining Matches = True Positives (TP)</li> <li>Some predictions are not matched to anything (FP)</li> <li>Some ground truth objects are not matched to anything (FN) <br/></li> <li>Problem with hungarian matching: Unstability i.e. object ID might be switched during occulusion.</li> </ul> </li> <li> <p><strong>Detection Accuracy (DetA)</strong></p> \[\frac{TP}{TP + FP + FN}\] <ul> <li>Depends only on current frame (not the video sequence)</li> <li>Depends on Hungarian matching</li> <li>Depends on IoU threshold (0.5)</li> <li>Good way since it pensalizes you for missing objects, detecting same object twice, or objects that are not there or inaccurately.</li> </ul> </li> </ul> <hr/> <h3 id="multiple-object-tracking-benchmarking-mot">Multiple Object Tracking Benchmarking (MOT)</h3> <p><a href="https://motchallenge.net/data/MOT17/">MOT17 Challenge</a></p> <ul> <li>Ground truth <ul> <li>Set of frames of a video sequence</li> <li>For each frame - a set of GT objects</li> <li>Bounding box - x, y, w, h</li> <li>Object id - gtld</li> </ul> </li> <li>Prediction <ul> <li>For each frame - a set of predictions</li> <li>Bounding box - x, y, w, h</li> <li>trackld</li> </ul> </li> <li><strong>Identity Switch</strong>: Occurs if same GT object us detected with different trackID. It is sovled by a modified version of Hungarian Match i.e. Sticky Hungarian Matching.</li> <li>Sticky Hungarian Matching <ul> <li>Similarity = IOU + 1000 * <same_track_id> but if IoU &lt; 0.5 then similarity is = O</same_track_id></li> <li>Matching is done minimising new score.</li> </ul> </li> </ul> <p>So <strong>Multiple Object Tracking Accuracy (MOTA)</strong> is defined as</p> \[MOTA = 1 - \frac{|FN| + |FP| + |IDSW|}{|gtDet|}\] <p>here (IDSW) is Identity Switch and (gtDet) is Ground Truth Detection.</p> <ul> <li>It is dependent on Sticky Hungarian Matching, current &amp; previous frame and $IoU$ threshold (0.5).</li> </ul> <p><strong>Problems with MOTA</strong></p> <ul> <li> <p>IDSW contribute ~1% to metric</p> <div class="row"> </div> </li> </ul> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/metrics/HOTA-480.webp 480w,/assets/img/posts/metrics/HOTA-800.webp 800w,/assets/img/posts/metrics/HOTA-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/metrics/HOTA.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>&lt;/div&gt;</p> <p>Source: <a href="https://arxiv.org/abs/2009.07736#"><em>HOTA Paper.</em></a>. A simple tracking example highlighting one of the main differences between evaluation metrics. Three different trackers are shown in order of increasing detection accuracy and decreasing association accuracy. MOTA and IDF1 overemphasize the effect of accurate detection and association respectively. HOTA balances both of these by being an explicit combination of a detection score DetA and an association score AssA.</p> <ul> <li>Does not take detection accuracy into account (beyond 0.5 IoU)</li> <li>So researchers sometimes prefer Multiple Object Tracking Precision (<em>MOTP</em>) <ul> <li> \[MOTP = \frac{1}{|TP|}\sum_{TP} IoU\] </li> </ul> </li> <li>but then we have a different problem of having two metrics i.e. MOTA for object detection and MOTP for actually evaluating which trade off we want to take between tracking and detection accuracy.</li> </ul> <div class="row"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/metrics/IDF1-480.webp 480w,/assets/img/posts/metrics/IDF1-800.webp 800w,/assets/img/posts/metrics/IDF1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/metrics/IDF1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <ul> <li>In the above tracking example which shows how the single best trajectory matching, as performed by IDF1, can result in unintuitive matches between trajectories.</li> </ul> <hr/> <h3 id="idf1">IDF1</h3> <ul> <li> <p>IDF1 in context of <em>object tracking</em> is slighlty different from the conventional IDF (Inverse Document Frequency) component of the TF-IDF (Term Frequency-Inverse Document Frequency) weighting scheme.</p> </li> <li> <p>Unlike traditional metrics that focus on frame-level accuracy, IDF1 takes into account the entire identity of objects over time, making it particularly valuable for assessing how well a tracking algorithm maintains the identity of objects across multiple frames.</p> </li> <li> <p>The IDF1 score is defined as the harmonic mean of the Identification Precision (IDP) and Identification Recall (IDR). These two metrics are computed as follows:</p> <ul> <li> <p><strong>Identification Precision</strong> (IDP): The proportion of correctly identified detections (i.e., the correct matches of tracked objects to ground truth objects) relative to the total number of detections made by the tracker.</p> </li> <li> <p><strong>Identification Recall</strong> (IDR): The proportion of correctly identified ground truth objects relative to the total number of ground truth objects.</p> </li> </ul> </li> </ul> \[IDF1 = 2 X \frac{IDP~X~IDR}{IDP + IDR}\] <hr/> <h3 id="hota">HOTA</h3>]]></content><author><name></name></author><category term="[&quot;Notes&quot;]"/><category term="deep-learning"/><category term="math"/><category term="code"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">GANs</title><link href="https://hrishikeshh.github.io/blog/2024/GAN/" rel="alternate" type="text/html" title="GANs"/><published>2024-06-20T00:00:00+00:00</published><updated>2024-06-20T00:00:00+00:00</updated><id>https://hrishikeshh.github.io/blog/2024/GAN</id><content type="html" xml:base="https://hrishikeshh.github.io/blog/2024/GAN/"><![CDATA[<p>Generative adversarial networks belong to the set of generative models in contrast to discriminative models, i.e., they focus on learning the unknown probability distribution of the input data to generate similar inputs rather than just classifying inputs as belonging to a certain class.</p> <blockquote> <p>üìù For instance, given panda images, a generative model will try to understand how pandas look like (learn the probability distribution) rather than trying to accurately predict if an image is of a panda or another animal. This allows you to generate new panda images.</p> </blockquote> <p>GANs are made of two deep learning models that compete against each other (hence, the term adversarial):</p> <ol> <li> <p><strong>Generator (Forger)</strong> This neural network receives a sample from a random distribution $Z$ (noise). It transforms it into something (a panda) that looks like it came from the target/true distribution(panda images). This is done by learning a mapping between the input samples and the images in the true distribution, during the training phase.</p> </li> <li> <p><strong>Discriminator (Detective)</strong></p> <p>This neural network receives images from the true distribution $X$ as well as the new/fake images $XÃÇ$ generated by the generator. The goal is to discriminate between real and generated images. The network is trained to output 0 for a generated image and 1 for a real image.</p> </li> </ol> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/gan/gan1-480.webp 480w,/assets/img/posts/gan/gan1-800.webp 800w,/assets/img/posts/gan/gan1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/gan/gan1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="GAN" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> GAN </div> <p>The generator‚Äôs tries to fool the discriminator into thinking that its generated images belong to the true distribution. On the other hand, the discriminator tries to catch all the fake/generated images. This encourages the generator to learn the true probability distribution more closely and generate such real looking images that the discriminator‚Äôs output converges to 0.5, i.e., it is not able to distinguish fake from real.</p> <p>The generator‚Äôs output improves throughout the training iterations.</p> <p>Supervised or unsupervised learning? You saw that the generator model of the GAN learns the target probability distribution (looks for patterns in the input data) to generate new content; this is known as generative modeling.</p> <p>Generative modeling is an unsupervised task where the model is not told what kind of patterns to look for in the data and there is no error metric to improve the model. However, the training process of the GAN is posed as a supervised learning problem with the help of a discriminator. The discriminator is a supervised classifier that distinguishes between real and generated images. This allows us to devise a supervised loss function for the GAN.</p> <h5 id="loss-function">Loss Function</h5> <p>The binary cross entropy loss function for the GAN is as follows:</p> <p>The term D(x) is the probability that a data point belongs to class real, whereas the term 1-D(G(z)) is the probability of belonging to class fake. The loss function works by measuring how far away from the actual value (real 1 or fake 0) the prediction is for each class and then averages the errors (Expectation) to obtain the final loss.</p> <p>Discriminator‚Äôs aim The discriminator wants to distinguish between real and fake. Earlier, you mentioned the final form of the loss. Let‚Äôs see how the discriminator‚Äôs loss function is derived from the original form of the binary cross-entropy loss as follows:</p> <p>Loss(D(x),1)=[1‚àólog(D(x))+(1‚àí1)‚àólog(1‚àíD(x)]</p> <p>When you have the image coming from the generator, the function takes the form:</p> <p>Loss(D(G(z)),0)=[0‚àólog(D(G(z))+(1‚àí0)‚àólog(1‚àíD(G(z))]</p> <p>The terms (1) and (2) are added to achieve the final loss. To see why the discriminator maximises this loss.</p> <p>You can observe that the discriminator needs to maximize the $1st$ term in order to correctly predict ‚Äú1‚Äù for the real input image. Also, it needs to maximize the second term to correctly predict ‚Äú0‚Äù for the generated input image.</p> <h5 id="generators-aim">Generator‚Äôs Aim</h5> <p>The generator aims to generate such an image that the discriminator classifies it as real or 1. The generator‚Äôs loss function is the same as when the discriminator receives generated image, i.e.,</p> <p>Loss(D(G(z)),0)=log((1‚àíD(G(z))))</p> <p>However, unlike the discriminator, the generator minimizes this term . Let‚Äôs look at the plot again.</p> <p>As you can see in the log plot of the second term, in order to fool the discriminator (D(G(z))=1), you need to minimize the term.</p> <h5 id="training-the-gans">Training the GANs</h5> <p>The generator and discriminator are trained alternatively.</p> <p>For training the discriminator, the weights of the generator model are frozen. Two mini-batches are taken. One is from the real images data. The other consists of generated images obtained by feeding random noise samples to the generator. There are no labels associated with this data. However, the discriminator still learns due to the formulation of the loss function, which that we discussed earlier. The discriminator updates its weights to maximize the terms leading to fake images being classified as 0 and real as 1.</p> <p>For training the generator, the weights of the discriminator model are frozen. A mini-batch is taken from the noise. Once again there are no labels, but the model updates its weights to minimize the loss term, leading to fake images being classified as 1.</p>]]></content><author><name></name></author><category term="[&quot;Notes&quot;]"/><category term="deep-learning"/><category term="math"/><category term="code"/><summary type="html"><![CDATA[Generative adversarial networks belong to the set of generative models in contrast to discriminative models, i.e., they focus on learning the unknown probability distribution of the input data to generate similar inputs rather than just classifying inputs as belonging to a certain class.]]></summary></entry><entry><title type="html">Research: My two cents</title><link href="https://hrishikeshh.github.io/blog/2024/research/" rel="alternate" type="text/html" title="Research: My two cents"/><published>2024-05-16T00:00:00+00:00</published><updated>2024-05-16T00:00:00+00:00</updated><id>https://hrishikeshh.github.io/blog/2024/research</id><content type="html" xml:base="https://hrishikeshh.github.io/blog/2024/research/"><![CDATA[<hr/> <h3 id="short-term-machine-learning-research-projects">Short-term Machine Learning Research Projects</h3> <ol> <li> <p>Get familiar with the prior work done in the domain especially in context of project scope. Do the literature survery. Be it research papers, blogs, lectures, etc. Read it. Try to replicate the results, if possible. <a href="https://arxiv.org/abs/1708.04133"><em>A good paper on reproduciblity</em></a></p> </li> <li> <p>Use version control. Things will break and undo button will be handy.</p> </li> <li> <p>Formalize your approach and technical thinking by writing extensively. This will bring clarity about your objective, hypothesis and the ways to actually get feedback on what really works and what doesn‚Äôt work. Your supervisor can help you better if they can trace your work and the rational behind technical decisions. So writing it all down really helps.</p> </li> <li> <p>Irrespective of your findings and results of your experiments, discuss it with your team and guide to know what you should do differently in next iteration. <a href="https://en.wikipedia.org/wiki/Impostor_syndrome">Imposter Syndrome</a> may kick in early if you are stuck on a problem and not discussing it with your supervisors or peers.</p> </li> <li> <p>Reuse the standard structures prevelant in research projects. Investing in systematic approach early might slow you down a bit but will save weeks and months of time because of easy detection of improvement scope in your project. <a href="https://www.deeplearningbook.org/contents/guidelines.html">[<em>Read this chapter</em>]</a></p> </li> <li> <p>Avoid <strong><em>overcomplication</em></strong>. Start with a simple solution which works and do rapid iterations to improve it further instead of a really complex solution with slow iterations. Think in terms of minimal number of components required to solve the problem to desired level of performance.</p> </li> <li> <p>Get a thorough understanding of your evaluation metric. <em>Why this metric? How does it correlate with what our objective?</em>. It will help with the optimization (hyper-parameter tuning, etc)</p> </li> </ol> <hr/> <h3 id="long-term-research">Long-term Research</h3> <hr/> <h3 id="deep-reinforcement-learning">Deep Reinforcement Learning</h3> <ul> <li>A good list <a href="https://spinningup.openai.com/en/latest/spinningup/keypapers.html">[link]</a> of key papers to get started in DRL.</li> <li><a href="https://nbdev.fast.ai/tutorials/best_practices.html">How to write great nbdev notebooks</a></li> </ul> <hr/> <h3 id="blogs-worth-slow-reading">Blogs worth slow reading</h3> <ul> <li><a href="http://joschu.net/blog/opinionated-guide-ml-research.html">An Opinionated Guide to ML Research</a> by <a href="http://joschu.net/index.html"><em>John Schulman</em></a></li> <li><a href="https://michaelnielsen.org/blog/principles-of-effective-research/">Principles of Effective Research</a> by <a href="https://michaelnielsen.org/"><em>Michael Nielsen</em></a></li> <li><a href="https://www.cs.virginia.edu/~robins/YouAndYourResearch.html">You and Your Research</a> by <a href="https://en.wikipedia.org/wiki/Richard_Hamming"><em>Richard Hamming</em></a></li> </ul> <h3 id="arxiv-paper">ArXiv Paper</h3> <ul> <li><a href="https://trevorcampbell.me/html/arxiv.html">Guide on how to upload a paper on arXiv</a></li> </ul>]]></content><author><name></name></author><category term="Research"/><category term="research"/><category term="deep-learning"/><summary type="html"><![CDATA[These are the nuggets of wisdom I found in the corners of internet while doing my own stint of research. Enjoy.]]></summary></entry><entry><title type="html">DSA Templates (Java)</title><link href="https://hrishikeshh.github.io/blog/2024/java-template/" rel="alternate" type="text/html" title="DSA Templates (Java)"/><published>2024-03-15T00:00:00+00:00</published><updated>2024-03-15T00:00:00+00:00</updated><id>https://hrishikeshh.github.io/blog/2024/java-template</id><content type="html" xml:base="https://hrishikeshh.github.io/blog/2024/java-template/"><![CDATA[ <hr/> <h3 id="two-pointers-one-input-opposite-ends">Two pointers: one input, opposite ends</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// do some logic here with left and right</span>
        <span class="k">if</span> <span class="o">(</span><span class="no">CONDITION</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">left</span><span class="o">++;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">right</span><span class="o">--;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="sliding-window">Sliding Window</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">curr</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">right</span><span class="o">++)</span> <span class="o">{</span>
        <span class="c1">// do logic here to add arr[right] to curr</span>

        <span class="k">while</span> <span class="o">(</span><span class="no">WINDOW_CONDITION_BROKEN</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// remove arr[left] from curr</span>
            <span class="n">left</span><span class="o">++;</span>
        <span class="o">}</span>

        <span class="c1">// update ans</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="buidling-a-prefix-sum">Buidling a Prefix Sum</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">prefix</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
    <span class="n">prefix</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>

    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">prefix</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">prefix</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">prefix</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="efficient-string-building">Efficient String Building</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">String</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="nl">c:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="fast--slow-pointer"><em>Fast &amp; Slow pointer</em></h3> <ul> <li> <p>Similar to the two pointers pattern, the fast and slow pointers pattern uses two pointers to traverse an <code class="language-plaintext highlighter-rouge">iterable data structure</code> at different speeds. It‚Äôs usually used to identify distinguishable features of <strong>directional data structures</strong>, such as a linked list or an array.</p> </li> <li> <p>The pointers can be used to traverse the array or list in either direction, however, one moves faster than the other. Generally, the slow pointer moves forward by a factor of one, and the fast pointer moves by a factor of two in each step. However, the speed can be adjusted according to the problem statement.</p> </li> <li> <p>Unlike the two pointers approach, which is concerned with data values, the fast and slow pointers approach is used to determine data structure traits using indices in arrays or node pointers in linked lists. The approach is commonly used to detect cycles in the given data structure, so it‚Äôs also known as <strong>Floyd‚Äôs cycle detection algorithm</strong>.</p> </li> <li> <p>The key idea is that the pointers start at the same location, but they move forward at different speeds. If there is a cycle, the two are bound to meet at some point in the traversal. To understand the concept, think of two runners on a track. While they start from the same point, they have different running speeds. If the race track is a circle, the faster runner will overtake the slower one after completing a lap. On the other hand, if the track is straight, the faster runner will end the race before the slower one, hence never meeting on the track again. The fast and slow pointers pattern uses the same intuition.</p> </li> </ul> <p><strong><em>Does my problem match this pattern?</em></strong></p> <blockquote> <p><strong><em>Yes</em></strong>, if either of these conditions is fulfilled:</p> <ul> <li> <p>Either as an intermediate step, or as the final solution, the problem requires identifying:</p> <ul> <li>the first \(x\) of the elements in a linked list, or,</li> <li>the element at the \(k-way\) point in a linked list, for example, the middle element, or the element at the start of the second quartile, etc.</li> <li>the \(k^{th}\) last element in a linked list</li> </ul> </li> <li> <p>Solving the problem requires detecting the presence of a cycle in a linked list.</p> </li> <li> <p>Solving the problem requires detecting the presence of a cycle in a sequence of symbols.</p> </li> </ul> <p><strong><em>No</em></strong>, if either of these conditions is fulfilled:</p> <ul> <li> <p>The input data cannot be traversed in a linear fashion, that is, it‚Äôs neither in an array, nor in a linked list, nor in a string of characters.</p> </li> <li> <p>The problem can be solved with two pointers traversing an array or a linked list at the same pace.</p> </li> </ul> </blockquote> <p><strong>Real-world problems</strong></p> <p>Many problems in the real world use the fast and slow pointers pattern. Let‚Äôs look at some examples.</p> <ul> <li> <p><strong><em>Symlink verification</em></strong>: Fast and slow pointers can be used in a symlink verification utility in an operating system. A symbolic link, or symlink, is simply a shortcut to another file. Essentially, it‚Äôs a file that points to another file. Symlinks can easily create loops or cycles where shortcuts point to each other. To avoid such occurrences, a symlink verification utility can be used. Similar to a linked list, fast and slow pointers can detect a loop in the symlinks by moving along the connected files or directories at different speeds.</p> </li> <li> <p><strong><em>Compiling an object-oriented program</em></strong>: Usually, programs are not contained in a single file. Particularly, for large applications, modules can be divided into different files for better maintenance. Dependency relationships are then defined to specify the order of compilation for these files. However, sometimes, there might be cyclic dependencies that can lead to an error. Fast and slow pointers can be used to identify and remove these cycles for seamless compilation and execution of the program.</p> </li> </ul> <hr/> <h3 id="linked-list-fast-and-slow-pointer">Linked List: Fast and slow pointer</h3> <blockquote> <p>a.k.a. <strong><em>Floyd‚Äôs cycle detection</em></strong></p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">ListNode</span> <span class="n">slow</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
    <span class="nc">ListNode</span> <span class="n">fast</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="c1">//checking this condition so that line 10 </span>
    <span class="c1">//i.e. fast.next.next doesn't throw null pointer exception  </span>
    
    <span class="k">while</span> <span class="o">(</span><span class="n">fast</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">fast</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// do logic</span>
        <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="reversing-a-linked-list">Reversing a Linked List</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">ListNode</span> <span class="nf">fn</span><span class="o">(</span><span class="nc">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">ListNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
    <span class="nc">ListNode</span> <span class="n">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">curr</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ListNode</span> <span class="n">nextNode</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="n">curr</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>
        <span class="n">prev</span> <span class="o">=</span> <span class="n">curr</span><span class="o">;</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">nextNode</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">prev</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="find-number-of-subarrays-that-fit-an-exact-criteria">Find number of subarrays that fit an exact criteria</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">counts</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="n">counts</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">curr</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">num:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// do logic to change curr</span>
        <span class="n">ans</span> <span class="o">+=</span> <span class="n">counts</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">curr</span> <span class="o">-</span> <span class="n">k</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="n">counts</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">curr</span><span class="o">,</span> <span class="n">counts</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">curr</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="monotonic-increasing-stack">Monotonic increasing stack</h3> <blockquote> <p>The same logic can be applied to maintain a monotonic queue.</p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">num:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// for monotonic decreasing, just flip the &gt; to &lt;</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">empty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// do logic</span>
            <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <p><strong>Note:</strong></p> <ul> <li>Iterative and recursive approaches do the job in one pass, but they both need up to $O(h)$ space to keep the stack, where $h$is a tree <code class="language-plaintext highlighter-rouge">height</code>.</li> <li>Morris‚Äôs approach is a two-pass approach, but it‚Äôs a constant-space one.</li> </ul> <blockquote> <p><strong>DFS: Pre or Inorder Traversal</strong></p> <ul> <li>Iterative: <em>Best time</em></li> <li>Recursive: <em>Simplest to write</em></li> <li>Morris: <em>Constant Space</em></li> </ul> </blockquote> <h3 id="binary-tree-dfsrecursive">Binary Tree: DFS(Recursive)</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">dfs</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="c1">// do logic</span>
    <span class="n">dfs</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
    <span class="n">dfs</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="binary-tree-dfsiterative">Binary Tree: DFS(Iterative)</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">dfs</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
    <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="k">while</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
        <span class="nc">TreeNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="c1">// do logic</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="binary-tree-dfs-pre-in-post">Binary Tree: DFS (Pre, In, Post)</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">preorderTraversal</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>
    <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>   <span class="k">return</span> <span class="n">output</span><span class="o">;</span>
    
    <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
    
    <span class="k">while</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
        <span class="nc">TreeNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="n">output</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>  <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">output</span><span class="o">;</span>
<span class="o">}</span>


<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">inorderTraversal</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
    
    <span class="nc">TreeNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">curr</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">curr</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">curr</span><span class="o">);</span>
            <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="n">res</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">curr</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">postorderTraversal</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
    
    <span class="k">if</span><span class="o">(</span><span class="n">root</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>    <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>

    <span class="k">while</span><span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
        <span class="nc">TreeNode</span> <span class="n">current</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="n">order</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">current</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>   <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>  <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">ls</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// Consider Pre-Order traversal (root --&gt; Left --&gt; Right), </span>
<span class="c1">// while in post-order, it is Left --&gt; Right --&gt; Root. </span>
<span class="c1">// So if you visualize we only have to visit the root in the end while traversing.</span>

<span class="c1">// So we will insert the root in the first go and will keep </span>
<span class="c1">// adding the corresponding left and right child before the location of root in the answer (post-order traversal).</span>
<span class="c1">//This trick is quite evident in the code. We are making sure all the new additions are updated at the 0th index.</span>

<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">levelOrderTraversal</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>

    <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
        <span class="nc">TreeNode</span> <span class="n">current</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div> <hr/> <h3 id="binary-tree-bfs">Binary Tree: BFS</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="nc">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">TreeNode</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">currentLength</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
        <span class="c1">// do logic for current level</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">currentLength</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">TreeNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
            <span class="c1">// do logic</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="graph-dfs-recursive">Graph: DFS (Recursive)</h3> <blockquote> <p>For the graph templates, assume the nodes are numbered from <code class="language-plaintext highlighter-rouge">0</code> to <code class="language-plaintext highlighter-rouge">n-1</code> and the graph is given as an adjacency list. Depending on the problem, you may need to convert the input into an equivalent adjacency list before using the templates.</p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">seen</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

<span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">graph</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">seen</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="no">START_NODE</span><span class="o">);</span>
    <span class="k">return</span> <span class="nf">dfs</span><span class="o">(</span><span class="no">START_NODE</span><span class="o">,</span> <span class="n">graph</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">int</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">node</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">graph</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="c1">// do some logic</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">neighbor:</span> <span class="n">graph</span><span class="o">[</span><span class="n">node</span><span class="o">])</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">seen</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">neighbor</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">seen</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">neighbor</span><span class="o">);</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">dfs</span><span class="o">(</span><span class="n">neighbor</span><span class="o">,</span> <span class="n">graph</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="graph-dfs-iterative">Graph: DFS (Iterative)</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">graph</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
    <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">seen</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
    <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="no">START_NODE</span><span class="o">);</span>
    <span class="n">seen</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="no">START_NODE</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="k">while</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">empty</span><span class="o">())</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
        <span class="c1">// do some logic</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">neighbor:</span> <span class="n">graph</span><span class="o">[</span><span class="n">node</span><span class="o">])</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">seen</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">neighbor</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">seen</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">neighbor</span><span class="o">);</span>
                <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">neighbor</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="graph-bfs">Graph: BFS</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">graph</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">seen</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>
    <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="no">START_NODE</span><span class="o">);</span>
    <span class="n">seen</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="no">START_NODE</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
        <span class="c1">// do some logic</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">neighbor:</span> <span class="n">graph</span><span class="o">[</span><span class="n">node</span><span class="o">])</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">seen</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">neighbor</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">seen</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">neighbor</span><span class="o">);</span>
                <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">neighbor</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="union-find">Union Find</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">UnionFind</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">id</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="no">T</span> <span class="nf">find</span><span class="o">(</span><span class="no">T</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="no">T</span> <span class="n">y</span> <span class="o">=</span> <span class="n">id</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">x</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">y</span> <span class="o">!=</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">y</span> <span class="o">=</span> <span class="n">find</span><span class="o">(</span><span class="n">y</span><span class="o">);</span>
            <span class="n">id</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">y</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">union</span><span class="o">(</span><span class="no">T</span> <span class="n">x</span><span class="o">,</span> <span class="no">T</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">id</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">find</span><span class="o">(</span><span class="n">x</span><span class="o">),</span> <span class="n">find</span><span class="o">(</span><span class="n">y</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="finding-top-k-elements-with-heap">Finding top K elements with heap</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">heap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;&gt;(</span><span class="no">CRITERIA</span><span class="o">);</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">num:</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">heap</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">heap</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">heap</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kt">int</span><span class="o">[]</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">k</span><span class="o">];</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">ans</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">heap</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="binary-search">Binary Search</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">==</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// do something</span>
            <span class="k">return</span> <span class="n">mid</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// left is the insertion point</span>
    <span class="k">return</span> <span class="n">left</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="binary-search-duplicate-elements-left-most-insertion-point">Binary Search: Duplicate elements, left-most insertion point</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">left</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="binary-search-duplicate-elements-right-most-insertion-point">Binary search: duplicate elements, right-most insertion point</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">mid</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">left</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="binary-search-for-greedy-problems">Binary Search: For greedy problems</h3> <blockquote> <p>If you are looking for <strong>minimum</strong></p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="no">MINIMUM_POSSIBLE_ANSWER</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="no">MAXIMUM_POSSIBLE_ANSWER</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">check</span><span class="o">(</span><span class="n">mid</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">left</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">check</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// this function is implemented depending on the problem</span>
    <span class="k">return</span> <span class="no">BOOLEAN</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <blockquote> <p>If you are looking for <strong>maximum</strong></p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="no">MINIMUM_POSSIBLE_ANSWER</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="no">MAXIMUM_POSSIBLE_ANSWER</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="o">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">check</span><span class="o">(</span><span class="n">mid</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">right</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">check</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// this function is implemented depending on the problem</span>
    <span class="k">return</span> <span class="no">BOOLEAN</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="backtracking">Backtracking</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">backtrack</span><span class="o">(</span><span class="no">STATE</span> <span class="n">curr</span><span class="o">,</span> <span class="no">OTHER_ARGUMENTS</span><span class="o">...)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="no">BASE_CASE</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// modify the answer</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="no">ITERATE_OVER_INPUT</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// modify the current state</span>
        <span class="n">ans</span> <span class="o">+=</span> <span class="n">backtrack</span><span class="o">(</span><span class="n">curr</span><span class="o">,</span> <span class="no">OTHER_ARGUMENTS</span><span class="o">...)</span>
        <span class="c1">// undo the modification of the current state</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="dynamic-programming-top-down-memoization">Dynamic Programming: Top-Down Memoization</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="no">STATE</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">memo</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

<span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">dp</span><span class="o">(</span><span class="no">STATE_FOR_WHOLE_INPUT</span><span class="o">,</span> <span class="n">arr</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">int</span> <span class="nf">dp</span><span class="o">(</span><span class="no">STATE</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="no">BASE_CASE</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">memo</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="no">STATE</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memo</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="no">STATE</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="no">RECURRENCE_RELATION</span><span class="o">(</span><span class="no">STATE</span><span class="o">);</span>
    <span class="n">memo</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="no">STATE</span><span class="o">,</span> <span class="n">ans</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>

</code></pre></div></div> <h3 id="build-a-trie">Build a Trie</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// note: using a class is only necessary if you want to store data at each node.</span>
<span class="c1">// otherwise, you can implement a trie using only hash maps.</span>
<span class="kd">class</span> <span class="nc">TrieNode</span> <span class="o">{</span>
    <span class="c1">// you can store data at nodes if you wish</span>
    <span class="kt">int</span> <span class="n">data</span><span class="o">;</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">TrieNode</span><span class="o">&gt;</span> <span class="n">children</span><span class="o">;</span>
    <span class="nc">TrieNode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">children</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">TrieNode</span> <span class="nf">buildTrie</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">TrieNode</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TrieNode</span><span class="o">();</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="nl">word:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">TrieNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="nl">c:</span> <span class="n">word</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">curr</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">curr</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="k">new</span> <span class="nc">TrieNode</span><span class="o">());</span>
            <span class="o">}</span>

            <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// at this point, you have a full word at curr</span>
        <span class="c1">// you can perform more logic here to give curr an attribute if you want</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> <hr/> <h3 id="dijkstras-algorithm">Dijkstra‚Äôs Algorithm</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">distances</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
<span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">distances</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">);</span>
<span class="n">distances</span><span class="o">[</span><span class="n">source</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Pair</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">heap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Pair</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span><span class="nc">Integer</span><span class="o">&gt;&gt;(</span><span class="nc">Comparator</span><span class="o">.</span><span class="na">comparing</span><span class="o">(</span><span class="nl">Pair:</span><span class="o">:</span><span class="n">getKey</span><span class="o">));</span>
<span class="n">heap</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Pair</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">source</span><span class="o">));</span>

<span class="k">while</span> <span class="o">(!</span><span class="n">heap</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">Pair</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">heap</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="kt">int</span> <span class="n">currDist</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
    <span class="kt">int</span> <span class="n">node</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
    
    <span class="k">if</span> <span class="o">(</span><span class="n">currDist</span> <span class="o">&gt;</span> <span class="n">distances</span><span class="o">[</span><span class="n">node</span><span class="o">])</span> <span class="o">{</span>
        <span class="k">continue</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="k">for</span> <span class="o">(</span><span class="nc">Pair</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="nl">edge:</span> <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">node</span><span class="o">))</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">nei</span> <span class="o">=</span> <span class="n">edge</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">weight</span> <span class="o">=</span> <span class="n">edge</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">currDist</span> <span class="o">+</span> <span class="n">weight</span><span class="o">;</span>
        
        <span class="k">if</span> <span class="o">(</span><span class="n">dist</span> <span class="o">&lt;</span> <span class="n">distances</span><span class="o">[</span><span class="n">nei</span><span class="o">])</span> <span class="o">{</span>
            <span class="n">distances</span><span class="o">[</span><span class="n">nei</span><span class="o">]</span> <span class="o">=</span> <span class="n">dist</span><span class="o">;</span>
            <span class="n">heap</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Pair</span><span class="o">(</span><span class="n">dist</span><span class="o">,</span> <span class="n">nei</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><img src="/img/DSA_cheatsheet/1.png" alt=""/> <img src="/img/DSA_cheatsheet/2.png" alt=""/> <img src="/img/DSA_cheatsheet/3.png" alt=""/> <img src="/img/DSA_cheatsheet/4.png" alt=""/></p> <hr/> <h2 id="extra">Extra</h2> <h3 id="morris-traversal">Morris Traversal</h3> <ul> <li>Performed on <code class="language-plaintext highlighter-rouge">threaded binary tree</code> - has a thread or link that points to some ancestor node</li> <li>Takes space complexity of $O(1)$ and do not require stack or queue.</li> <li>Time complexity: $O(n)$</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//pseudo-code of Morris Inorder</span>
<span class="mi">1</span><span class="o">.</span> <span class="nc">Initialize</span> <span class="n">current</span> <span class="n">as</span> <span class="n">the</span> <span class="n">root</span> <span class="n">of</span> <span class="n">the</span> <span class="n">binary</span> <span class="n">tree</span><span class="o">.</span>
<span class="mi">2</span><span class="o">.</span> <span class="nc">While</span> <span class="n">current</span> <span class="n">is</span> <span class="n">not</span> <span class="kc">null</span><span class="o">:</span>
   <span class="n">a</span><span class="o">.</span> <span class="nc">If</span> <span class="n">current</span> <span class="n">has</span> <span class="n">no</span> <span class="n">left</span> <span class="nl">child:</span>
      <span class="n">i</span><span class="o">.</span> <span class="nc">Visit</span> <span class="n">the</span> <span class="n">current</span> <span class="n">node</span><span class="o">.</span>
      <span class="n">ii</span><span class="o">.</span> <span class="nc">Move</span> <span class="n">to</span> <span class="n">the</span> <span class="n">right</span> <span class="nf">child</span> <span class="o">(</span><span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">right</span><span class="o">).</span>
   <span class="n">b</span><span class="o">.</span> <span class="nc">If</span> <span class="n">current</span> <span class="n">has</span> <span class="n">a</span> <span class="n">left</span> <span class="nl">child:</span>
      <span class="n">i</span><span class="o">.</span> <span class="nc">Find</span> <span class="n">the</span> <span class="n">inorder</span> <span class="n">predecessor</span> <span class="n">of</span> <span class="nf">current</span> <span class="o">(</span><span class="n">the</span> <span class="n">rightmost</span> <span class="n">node</span> <span class="n">in</span> <span class="n">the</span> <span class="n">left</span> <span class="n">subtree</span><span class="o">).</span>
      <span class="n">ii</span><span class="o">.</span> <span class="nc">If</span> <span class="n">the</span> <span class="n">right</span> <span class="n">child</span> <span class="n">of</span> <span class="n">the</span> <span class="n">inorder</span> <span class="n">predecessor</span> <span class="n">is</span> <span class="kc">null</span><span class="o">:</span>
          <span class="o">-</span> <span class="nc">Set</span> <span class="n">the</span> <span class="n">right</span> <span class="n">child</span> <span class="n">of</span> <span class="n">the</span> <span class="n">inorder</span> <span class="n">predecessor</span> <span class="n">to</span> <span class="n">current</span><span class="o">.</span>
          <span class="o">-</span> <span class="nc">Move</span> <span class="n">to</span> <span class="n">the</span> <span class="n">left</span> <span class="nf">child</span> <span class="o">(</span><span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">left</span><span class="o">).</span>
      <span class="n">iii</span><span class="o">.</span> <span class="nc">If</span> <span class="n">the</span> <span class="n">right</span> <span class="n">child</span> <span class="n">of</span> <span class="n">the</span> <span class="n">inorder</span> <span class="n">predecessor</span> <span class="n">is</span> <span class="n">not</span> <span class="kc">null</span><span class="o">:</span>
          <span class="o">-</span> <span class="nc">Reset</span> <span class="n">the</span> <span class="n">right</span> <span class="n">child</span> <span class="n">of</span> <span class="n">the</span> <span class="n">inorder</span> <span class="n">predecessor</span> <span class="n">to</span> <span class="kc">null</span><span class="o">.</span>
          <span class="o">-</span> <span class="nc">Visit</span> <span class="n">the</span> <span class="n">current</span> <span class="n">node</span><span class="o">.</span>
          <span class="o">-</span> <span class="nc">Move</span> <span class="n">to</span> <span class="n">the</span> <span class="n">right</span> <span class="nf">child</span> <span class="o">(</span><span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">right</span><span class="o">).</span>

</code></pre></div></div> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">inorder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Node</span> <span class="n">current</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>
    <span class="k">while</span><span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//left is null then print the node and go to right</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">data</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="c1">//find the predecessor.</span>
            <span class="nc">Node</span> <span class="n">predecessor</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
            <span class="c1">//To find predecessor keep going right till right node is not null or right node is not current.</span>
            <span class="k">while</span><span class="o">(</span><span class="n">predecessor</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="n">current</span> <span class="o">&amp;&amp;</span> <span class="n">predecessor</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
                <span class="n">predecessor</span> <span class="o">=</span> <span class="n">predecessor</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="c1">//if right node is null then go left after establishing link from predecessor to current.</span>
            <span class="k">if</span><span class="o">(</span><span class="n">predecessor</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
                <span class="n">predecessor</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">current</span><span class="o">;</span>
                <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
            <span class="o">}</span><span class="k">else</span><span class="o">{</span> <span class="c1">//left is already visit. Go rigth after visiting current.</span>
                <span class="n">predecessor</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">data</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
                <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">preorder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Node</span> <span class="n">current</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">current</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">data</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
            <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="nc">Node</span> <span class="n">predecessor</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
            <span class="k">while</span><span class="o">(</span><span class="n">predecessor</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="n">current</span> <span class="o">&amp;&amp;</span> <span class="n">predecessor</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">predecessor</span> <span class="o">=</span> <span class="n">predecessor</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">predecessor</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
                <span class="n">predecessor</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">current</span><span class="o">;</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">current</span><span class="o">.</span><span class="na">data</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
                <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
            <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                <span class="n">predecessor</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div> <hr/> <h2 id="string-manipulations">String Manipulations</h2> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"A B C D "</span><span class="o">;</span>


<span class="c1">// trim the trailing spaces in the string </span>
<span class="c1">// "A B C D"</span>
<span class="c1">// Returns a copy of string O(N)</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">trim</span><span class="o">();</span>  

<span class="c1">//Comparisons</span>

<span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"QuickRef"</span><span class="o">);</span> 
<span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"QuickRef"</span><span class="o">);</span> 

<span class="n">s1</span> <span class="o">==</span> <span class="n">s2</span>          <span class="c1">// false</span>
<span class="n">s1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s2</span><span class="o">)</span>     <span class="c1">// true</span>

<span class="s">"AB"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">"ab"</span><span class="o">)</span>  <span class="c1">// true</span>


<span class="c1">//Concatenation</span>

<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">+</span> <span class="s">"str"</span> <span class="o">+</span> <span class="mi">3</span><span class="o">;</span>     <span class="c1">// 3str3</span>
<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">+</span> <span class="s">"str"</span><span class="o">;</span>     <span class="c1">// 6str</span>
<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"3"</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">+</span> <span class="s">"str"</span><span class="o">;</span>   <span class="c1">// 33str</span>
<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"3"</span> <span class="o">+</span> <span class="s">"3"</span> <span class="o">+</span> <span class="s">"23"</span><span class="o">;</span>  <span class="c1">// 3323</span>
<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">""</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">+</span> <span class="s">"23"</span><span class="o">;</span> <span class="c1">// 3323</span>
<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">23</span><span class="o">;</span>        <span class="c1">// 29</span>


<span class="c1">// Manipulations </span>

<span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"Abcd"</span><span class="o">;</span>

<span class="n">str</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">();</span>     <span class="c1">// ABCD</span>
<span class="n">str</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">();</span>     <span class="c1">// abcd</span>
<span class="n">str</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="s">"#"</span><span class="o">);</span>       <span class="c1">// Abcd#</span>
<span class="n">str</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">"b"</span><span class="o">,</span> <span class="s">"-"</span><span class="o">);</span> <span class="c1">// A-cd</span>

<span class="s">"  abc "</span><span class="o">.</span><span class="na">trim</span><span class="o">();</span>       <span class="c1">// abc</span>
<span class="s">"ab"</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>    <span class="c1">// {'a', 'b'}</span>




<span class="c1">// Information</span>

<span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"abcd"</span><span class="o">;</span>

<span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>       <span class="c1">// c</span>
<span class="n">str</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">"a"</span><span class="o">)</span>     <span class="c1">// 0</span>
<span class="n">str</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="s">"z"</span><span class="o">)</span>     <span class="c1">// -1</span>
<span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>        <span class="c1">// 4</span>
<span class="n">str</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>      <span class="c1">// abcd</span>
<span class="n">str</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>    <span class="c1">// cd</span>
<span class="n">str</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">);</span>  <span class="c1">// c</span>
<span class="n">str</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"c"</span><span class="o">);</span>   <span class="c1">// true</span>
<span class="n">str</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">"d"</span><span class="o">);</span>   <span class="c1">// true</span>
<span class="n">str</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"a"</span><span class="o">);</span> <span class="c1">// true</span>
<span class="n">str</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>       <span class="c1">// false</span>


</code></pre></div></div> <p><a href="https://quickref.me/java.html">More</a></p> <hr/> <h3 id="java-specific-tricks-for-tackling-string-related-problems-efficiently">Java-specific tricks for tackling string-related problems efficiently:</h3> <ol> <li><strong>String to Character Array Conversion:</strong> <ul> <li>Converting a string to a character array (<code class="language-plaintext highlighter-rouge">char[]</code>) allows for easy manipulation of individual characters using array indexing.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"leetcode"</span><span class="o">;</span>
 <span class="kt">char</span><span class="o">[]</span> <span class="n">charArray</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
</code></pre></div> </div> </li> <li><strong>StringBuilder for String Concatenation:</strong> <ul> <li>Using <code class="language-plaintext highlighter-rouge">StringBuilder</code> is more efficient than concatenating strings using the <code class="language-plaintext highlighter-rouge">+</code> operator, especially in a loop where strings are frequently modified.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
 <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"Hello"</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"World"</span><span class="o">);</span>
 <span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</code></pre></div> </div> </li> <li><strong>Checking Palindromes:</strong> <ul> <li>For palindrome-related problems, consider using two pointers to check characters from the start and end simultaneously.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">boolean</span> <span class="nf">isPalindrome</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
     <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
     <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
         <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">++)</span> <span class="o">!=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">--))</span> <span class="o">{</span>
             <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
         <span class="o">}</span>
     <span class="o">}</span>
     <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
 <span class="o">}</span>
</code></pre></div> </div> </li> <li><strong>String Comparison:</strong> <ul> <li>When comparing strings, prefer using <code class="language-plaintext highlighter-rouge">equals()</code> or <code class="language-plaintext highlighter-rouge">compareTo()</code> instead of <code class="language-plaintext highlighter-rouge">==</code> to ensure content comparison.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="s">"hello"</span><span class="o">;</span>
 <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="s">"world"</span><span class="o">;</span>
 <span class="k">if</span> <span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">s2</span><span class="o">))</span> <span class="o">{</span>
     <span class="c1">// Strings are equal</span>
 <span class="o">}</span>
</code></pre></div> </div> </li> <li><strong>String Trimming and Splitting:</strong> <ul> <li>Utilize <code class="language-plaintext highlighter-rouge">trim()</code> to remove leading and trailing whitespaces and <code class="language-plaintext highlighter-rouge">split()</code> for breaking a string into an array of substrings.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="s">"   hello, world   "</span><span class="o">;</span>
 <span class="nc">String</span> <span class="n">trimmed</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">trim</span><span class="o">();</span>
 <span class="nc">String</span><span class="o">[]</span> <span class="n">parts</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">);</span>
</code></pre></div> </div> </li> <li><strong>String Reversal:</strong> <ul> <li>Reverse a string using either a <code class="language-plaintext highlighter-rouge">StringBuilder</code> or by converting it to a character array.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nc">String</span> <span class="n">original</span> <span class="o">=</span> <span class="s">"hello"</span><span class="o">;</span>
 <span class="nc">String</span> <span class="n">reversed1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">(</span><span class="n">original</span><span class="o">).</span><span class="na">reverse</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
 <span class="nc">String</span> <span class="n">reversed2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">(</span><span class="n">original</span><span class="o">).</span><span class="na">reverse</span><span class="o">());</span>
</code></pre></div> </div> </li> <li><strong>Substring Extraction:</strong> <ul> <li>Extract substrings using <code class="language-plaintext highlighter-rouge">substring(startIndex, endIndex)</code>. Be cautious about the endIndex, as it denotes the exclusive end position.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"leetcode"</span><span class="o">;</span>
 <span class="nc">String</span> <span class="n">subString</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span> <span class="c1">// Output: "tco"</span>
</code></pre></div> </div> </li> <li><strong>Regular Expressions:</strong> <ul> <li>Leverage regular expressions (<code class="language-plaintext highlighter-rouge">java.util.regex</code>) for complex pattern matching or extraction tasks.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">import</span> <span class="nn">java.util.regex.*</span><span class="o">;</span>

 <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="s">"abc123"</span><span class="o">;</span>
 <span class="nc">Pattern</span> <span class="n">pattern</span> <span class="o">=</span> <span class="nc">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"[0-9]+"</span><span class="o">);</span>
 <span class="nc">Matcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>

 <span class="k">if</span> <span class="o">(</span><span class="n">matcher</span><span class="o">.</span><span class="na">find</span><span class="o">())</span> <span class="o">{</span>
     <span class="nc">String</span> <span class="n">digits</span> <span class="o">=</span> <span class="n">matcher</span><span class="o">.</span><span class="na">group</span><span class="o">();</span>
     <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">digits</span><span class="o">);</span>  <span class="c1">// Output: "123"</span>
 <span class="o">}</span>
</code></pre></div> </div> <hr/> </li> </ol> <h3 id="hashmaphashset-templates">HashMap/HashSet Templates</h3> <ol> <li><strong>Frequency Counting:</strong> <blockquote> <p>Use <code class="language-plaintext highlighter-rouge">HashMap</code> to count the frequency of elements in an array or string. This is useful for problems involving finding duplicates, checking anagrams, or identifying the majority element.</p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">frequencyMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">frequencyMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="n">frequencyMap</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div> </div> </li> <li><strong>Character Frequency:</strong> <blockquote> <p>For problems involving character frequency in strings, use a <code class="language-plaintext highlighter-rouge">HashMap</code> to count the occurrences of each character.</p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">charFrequency</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">charFrequency</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">charFrequency</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div> </div> </li> <li><strong>Two-Sum and Three-Sum:</strong> <blockquote> <p>For Two-Sum and Three-Sum problems, use a <code class="language-plaintext highlighter-rouge">HashMap</code> to store the complement of the current element you are iterating over.</p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">complementMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">complement</span> <span class="o">=</span> <span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">complementMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">complement</span><span class="o">))</span> <span class="o">{</span>
        <span class="c1">// Found a pair or triplet</span>
    <span class="o">}</span>
    <span class="n">complementMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div> </div> </li> <li><strong>Subarray Sum Equals K:</strong> <blockquote> <p>For problems related to subarray sums, use a <code class="language-plaintext highlighter-rouge">HashMap</code> to store cumulative sums and their frequencies.</p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">cumulativeSumMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="n">cumulativeSumMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">sum</span> <span class="o">+=</span> <span class="n">num</span><span class="o">;</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">cumulativeSumMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">sum</span> <span class="o">-</span> <span class="n">k</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="n">cumulativeSumMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">sum</span> <span class="o">-</span> <span class="n">k</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">cumulativeSumMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">sum</span><span class="o">,</span> <span class="n">cumulativeSumMap</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">sum</span><span class="o">,</span> <span class="mi">0</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div> </div> </li> <li><strong>Linked List Cycle Detection:</strong> <blockquote> <p>When dealing with linked lists, <code class="language-plaintext highlighter-rouge">HashMap</code> can be used to detect cycles efficiently.</p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">ListNode</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="k">while</span> <span class="o">(</span><span class="n">head</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">visited</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">head</span><span class="o">))</span> <span class="o">{</span>
        <span class="c1">// Cycle detected</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="n">visited</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
    <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div> </div> </li> <li><strong>Cache Results:</strong> <blockquote> <p>For problems involving repetitive calculations or recursive calls, use a <code class="language-plaintext highlighter-rouge">HashMap</code> to cache results and avoid redundant computations.</p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">memo</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">fib</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">memo</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">n</span><span class="o">))</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memo</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fib</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
    <span class="n">memo</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div> </div> </li> <li><strong>Mapping Indices:</strong> <blockquote> <p>Use <code class="language-plaintext highlighter-rouge">HashMap</code> to map values to their indices, enabling quick lookups.</p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">indexMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">indexMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div> </div> </li> <li><strong>Group Anagrams:</strong> <blockquote> <p>For problems involving anagrams, use <code class="language-plaintext highlighter-rouge">HashMap</code> to group strings with the same set of characters.</p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">anagramGroups</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">str</span> <span class="o">:</span> <span class="n">strs</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">char</span><span class="o">[]</span> <span class="n">charArray</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
    <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">charArray</span><span class="o">);</span>
    <span class="nc">String</span> <span class="n">sortedStr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">charArray</span><span class="o">);</span>
    <span class="n">anagramGroups</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="n">sortedStr</span><span class="o">,</span> <span class="n">k</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;()).</span><span class="na">add</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div> </div> </li> <li><strong>Union-Find with HashMap:</strong> <blockquote> <p>For disjoint-set problems, you can implement union-find using <code class="language-plaintext highlighter-rouge">HashMap</code> to represent parent relationships.</p> </blockquote> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">parent</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">find</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">parent</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">parent</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">x</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">x</span><span class="o">)</span> <span class="o">!=</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">parent</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">find</span><span class="o">(</span><span class="n">parent</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">x</span><span class="o">)));</span> <span class="c1">// Path compression</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">parent</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div> </div> </li> </ol>]]></content><author><name></name></author><category term="Notes"/><category term="Articles"/><category term="code"/><category term="data-structures,"/><category term="algorithms"/><summary type="html"><![CDATA[These are java code templates based on most common datastructures and algorithm problems.]]></summary></entry><entry><title type="html">Pythonic Templates</title><link href="https://hrishikeshh.github.io/blog/2024/python-template/" rel="alternate" type="text/html" title="Pythonic Templates"/><published>2024-02-10T14:14:00+00:00</published><updated>2024-02-10T14:14:00+00:00</updated><id>https://hrishikeshh.github.io/blog/2024/python-template</id><content type="html" xml:base="https://hrishikeshh.github.io/blog/2024/python-template/"><![CDATA[<h2 id="two-pointers">Two Pointers</h2> <h3 id="type-1-one-input-opposite-ends">Type-1: One Input, Opposite Ends</h3> <ul id="two-pointer" class="tab" data-tab="899fcd48-fadd-4bd4-8a50-46a8fa3fd91f" data-name="two-pointer"> <li class="active" id="two-pointer-python"> <a href="#">python </a> </li> <li id="two-pointer-java"> <a href="#">java </a> </li> </ul> <ul class="tab-content" id="899fcd48-fadd-4bd4-8a50-46a8fa3fd91f" data-name="two-pointer"> <li class="active"> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="n">left</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">right</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>

    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
        <span class="c1"># do some logic here with left and right
</span>        <span class="k">if</span> <span class="n">CONDITION</span><span class="p">:</span>
            <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">right</span> <span class="o">-=</span> <span class="mi">1</span>
    
    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div> </li> <li> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">int</span> <span class="nf">fn</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// do some logic here with left and right</span>
        <span class="k">if</span> <span class="o">(</span><span class="no">CONDITION</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">left</span><span class="o">++;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">right</span><span class="o">--;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> </li> </ul> <h3 id="two-pointers-two-inputs-exhaust-both">Two pointers: Two Inputs, Exhaust Both</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr1</span><span class="p">,</span> <span class="n">arr2</span><span class="p">):</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">arr1</span><span class="p">)</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">arr2</span><span class="p">):</span>
        <span class="c1"># do some logic here
</span>        <span class="k">if</span> <span class="n">CONDITION</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">arr1</span><span class="p">):</span>
        <span class="c1"># do logic
</span>        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">arr2</span><span class="p">):</span>
        <span class="c1"># do logic
</span>        <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div> <h2 id="sliding-window">Sliding Window</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="n">left</span> <span class="o">=</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">curr</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">right</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)):</span>
        <span class="c1"># do logic here to add arr[right] to curr
</span>
        <span class="k">while</span> <span class="n">WINDOW_CONDITION_BROKEN</span><span class="p">:</span>
            <span class="c1"># remove arr[left] from curr
</span>            <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="c1"># update ans
</span>    
    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div> <h2 id="build-a-prefix-sum">Build a Prefix Sum</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="n">prefix</span> <span class="o">=</span> <span class="p">[</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)):</span>
        <span class="n">prefix</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    
    <span class="k">return</span> <span class="n">prefix</span>
</code></pre></div></div> <h2 id="efficient-string-building">Efficient String Building</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># arr is a list of characters
</span><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
        <span class="n">ans</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
</code></pre></div></div> <h2 id="linked-list">Linked List</h2> <h3 id="slow--fast-pointer">Slow &amp; Fast Pointer</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">head</span><span class="p">):</span>
    <span class="n">slow</span> <span class="o">=</span> <span class="n">head</span>
    <span class="n">fast</span> <span class="o">=</span> <span class="n">head</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="n">fast</span> <span class="ow">and</span> <span class="n">fast</span><span class="p">.</span><span class="nb">next</span><span class="p">:</span>
        <span class="c1"># do logic
</span>        <span class="n">slow</span> <span class="o">=</span> <span class="n">slow</span><span class="p">.</span><span class="nb">next</span>
        <span class="n">fast</span> <span class="o">=</span> <span class="n">fast</span><span class="p">.</span><span class="nb">next</span><span class="p">.</span><span class="nb">next</span>
    
    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div> <h3 id="reversing-a-linked-list">Reversing a Linked List</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">head</span><span class="p">):</span>
    <span class="n">curr</span> <span class="o">=</span> <span class="n">head</span>
    <span class="n">prev</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">while</span> <span class="n">curr</span><span class="p">:</span>
        <span class="n">next_node</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="nb">next</span>
        <span class="n">curr</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">prev</span>
        <span class="n">prev</span> <span class="o">=</span> <span class="n">curr</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">next_node</span> 
        
    <span class="k">return</span> <span class="n">prev</span>
</code></pre></div></div> <h2 id="find-number-of-subarrays-that-fit-an-exact-criteria">Find number of subarrays that fit an exact criteria</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
    <span class="n">counts</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
    <span class="n">counts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="n">curr</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
        <span class="c1"># do logic to change curr
</span>        <span class="n">ans</span> <span class="o">+=</span> <span class="n">counts</span><span class="p">[</span><span class="n">curr</span> <span class="o">-</span> <span class="n">k</span><span class="p">]</span>
        <span class="n">counts</span><span class="p">[</span><span class="n">curr</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div> <h2 id="monotonic-increasing-stack">Monotonic increasing stack</h2> <p>The same logic can be applied to maintain a monotonic queue.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
        <span class="c1"># for monotonic decreasing, just flip the &gt; to &lt;
</span>        <span class="k">while</span> <span class="n">stack</span> <span class="ow">and</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">num</span><span class="p">:</span>
            <span class="c1"># do logic
</span>            <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
        <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div> <h2 id="binary-tree">Binary tree</h2> <h3 id="bt-dfs-recursive">BT: DFS (recursive)</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">root</span><span class="p">:</span>
        <span class="k">return</span>
    
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="c1"># do logic
</span>    <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
    <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div> <h3 id="bt-dfs-iterative">BT: DFS (iterative)</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">root</span><span class="p">]</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
        <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
        <span class="c1"># do logic
</span>        <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">:</span>
            <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">:</span>
            <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div> <h3 id="bt-bfs">BT: BFS</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">root</span><span class="p">):</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="nf">deque</span><span class="p">([</span><span class="n">root</span><span class="p">])</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
        <span class="n">current_length</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span>
        <span class="c1"># do logic for current level
</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">current_length</span><span class="p">):</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">popleft</span><span class="p">()</span>
            <span class="c1"># do logic
</span>            <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">:</span>
                <span class="n">queue</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">:</span>
                <span class="n">queue</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div> <h2 id="graph">Graph</h2> <h3 id="graph-dfs-recursive">Graph: DFS (recursive)</h3> <p>For the graph templates, assume the nodes are numbered from 0 to n - 1 and the graph is given as an adjacency list. Depending on the problem, you may need to convert the input into an equivalent adjacency list before using the templates.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">graph</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
        <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="c1"># do some logic
</span>        <span class="k">for</span> <span class="n">neighbor</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">node</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">neighbor</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">neighbor</span><span class="p">)</span>
                <span class="n">ans</span> <span class="o">+=</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">neighbor</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">ans</span>

    <span class="n">seen</span> <span class="o">=</span> <span class="p">{</span><span class="n">START_NODE</span><span class="p">}</span>
    <span class="k">return</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">START_NODE</span><span class="p">)</span>
</code></pre></div></div> <h3 id="graph-dfs-iterative">Graph: DFS (iterative)</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">graph</span><span class="p">):</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">START_NODE</span><span class="p">]</span>
    <span class="n">seen</span> <span class="o">=</span> <span class="p">{</span><span class="n">START_NODE</span><span class="p">}</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
        <span class="n">node</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
        <span class="c1"># do some logic
</span>        <span class="k">for</span> <span class="n">neighbor</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">node</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">neighbor</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">neighbor</span><span class="p">)</span>
                <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">neighbor</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div> <h3 id="graph-bfs">Graph: BFS</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">graph</span><span class="p">):</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="nf">deque</span><span class="p">([</span><span class="n">START_NODE</span><span class="p">])</span>
    <span class="n">seen</span> <span class="o">=</span> <span class="p">{</span><span class="n">START_NODE</span><span class="p">}</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
        <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">popleft</span><span class="p">()</span>
        <span class="c1"># do some logic
</span>        <span class="k">for</span> <span class="n">neighbor</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">node</span><span class="p">]:</span>
            <span class="k">if</span> <span class="n">neighbor</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">neighbor</span><span class="p">)</span>
                <span class="n">queue</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">neighbor</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div> <h2 id="find-top-k-elements-with-heap">Find top k elements with heap</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">heapq</span>

<span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
    <span class="n">heap</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
        <span class="c1"># do some logic to push onto heap according to problem's criteria
</span>        <span class="n">heapq</span><span class="p">.</span><span class="nf">heappush</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="p">(</span><span class="n">CRITERIA</span><span class="p">,</span> <span class="n">num</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">k</span><span class="p">:</span>
            <span class="n">heapq</span><span class="p">.</span><span class="nf">heappop</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="p">[</span><span class="n">num</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">heap</span><span class="p">]</span>
</code></pre></div></div> <h2 id="binary-search">Binary Search</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">right</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">:</span>
            <span class="c1"># do something
</span>            <span class="k">return</span>
        <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">:</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
    
    <span class="c1"># left is the insertion point
</span>    <span class="k">return</span> <span class="n">left</span>
</code></pre></div></div> <h3 id="binary-search-duplicate-elements-left-most-insertion-point">Binary search: duplicate elements, left-most insertion point</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">right</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">target</span><span class="p">:</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">left</span>
</code></pre></div></div> <h3 id="binary-search-duplicate-elements-right-most-insertion-point">Binary search: duplicate elements, right-most insertion point</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">right</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">:</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">left</span>
</code></pre></div></div> <h3 id="binary-search-for-greedy-problems">Binary search: for greedy problems</h3> <p>If looking for a minimum:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="c1"># this function is implemented depending on the problem
</span>        <span class="k">return</span> <span class="n">BOOLEAN</span>

    <span class="n">left</span> <span class="o">=</span> <span class="n">MINIMUM_POSSIBLE_ANSWER</span>
    <span class="n">right</span> <span class="o">=</span> <span class="n">MAXIMUM_POSSIBLE_ANSWER</span>
    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="k">if</span> <span class="nf">check</span><span class="p">(</span><span class="n">mid</span><span class="p">):</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
    
    <span class="k">return</span> <span class="n">left</span>
</code></pre></div></div> <p>If looking for a maximum:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="c1"># this function is implemented depending on the problem
</span>        <span class="k">return</span> <span class="n">BOOLEAN</span>

    <span class="n">left</span> <span class="o">=</span> <span class="n">MINIMUM_POSSIBLE_ANSWER</span>
    <span class="n">right</span> <span class="o">=</span> <span class="n">MAXIMUM_POSSIBLE_ANSWER</span>
    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="k">if</span> <span class="nf">check</span><span class="p">(</span><span class="n">mid</span><span class="p">):</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span>
    
    <span class="k">return</span> <span class="n">right</span>
</code></pre></div></div> <h2 id="backtracking">Backtracking</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">backtrack</span><span class="p">(</span><span class="n">curr</span><span class="p">,</span> <span class="n">OTHER_ARGUMENTS</span><span class="p">...):</span>
    <span class="nf">if </span><span class="p">(</span><span class="n">BASE_CASE</span><span class="p">):</span>
        <span class="c1"># modify the answer
</span>        <span class="k">return</span>
    
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="nf">for </span><span class="p">(</span><span class="n">ITERATE_OVER_INPUT</span><span class="p">):</span>
        <span class="c1"># modify the current state
</span>        <span class="n">ans</span> <span class="o">+=</span> <span class="nf">backtrack</span><span class="p">(</span><span class="n">curr</span><span class="p">,</span> <span class="n">OTHER_ARGUMENTS</span><span class="p">...)</span>
        <span class="c1"># undo the modification of the current state
</span>    
    <span class="k">return</span> <span class="n">ans</span>
</code></pre></div></div> <h2 id="dynamic-programming-top-down-memoization">Dynamic programming: top-down memoization</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">arr</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">dp</span><span class="p">(</span><span class="n">STATE</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">BASE_CASE</span><span class="p">:</span>
            <span class="k">return</span> <span class="mi">0</span>
        
        <span class="k">if</span> <span class="n">STATE</span> <span class="ow">in</span> <span class="n">memo</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">STATE</span><span class="p">]</span>
        
        <span class="n">ans</span> <span class="o">=</span> <span class="nc">RECURRENCE_RELATION</span><span class="p">(</span><span class="n">STATE</span><span class="p">)</span>
        <span class="n">memo</span><span class="p">[</span><span class="n">STATE</span><span class="p">]</span> <span class="o">=</span> <span class="n">ans</span>
        <span class="k">return</span> <span class="n">ans</span>

    <span class="n">memo</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">return</span> <span class="nf">dp</span><span class="p">(</span><span class="n">STATE_FOR_WHOLE_INPUT</span><span class="p">)</span>
</code></pre></div></div> <h2 id="build-a-trie">Build a trie</h2> <ul id="log" class="tab" data-tab="1bbac870-ca7f-4b1e-b7dd-65106e756a82" data-name="log"> <li class="active" id="log-python"> <a href="#">python </a> </li> <li id="log-java"> <a href="#">java </a> </li> </ul> <ul class="tab-content" id="1bbac870-ca7f-4b1e-b7dd-65106e756a82" data-name="log"> <li class="active"> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># note: using a class is only necessary 
# if you want to store data at each node.
# otherwise, you can implement a trie using only hash maps.
</span><span class="k">class</span> <span class="nc">TrieNode</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># you can store data at nodes if you wish
</span>        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">children</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="n">words</span><span class="p">):</span>
    <span class="n">root</span> <span class="o">=</span> <span class="nc">TrieNode</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
        <span class="n">curr</span> <span class="o">=</span> <span class="n">root</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">c</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">curr</span><span class="p">.</span><span class="n">children</span><span class="p">:</span>
                <span class="n">curr</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="nc">TrieNode</span><span class="p">()</span>
            <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="p">.</span><span class="n">children</span><span class="p">[</span><span class="n">c</span><span class="p">]</span>
        <span class="c1"># at this point, you have a full word at curr
</span>        <span class="c1"># you can perform more logic here to 
</span>        <span class="c1"># give curr an attribute if you want
</span>    
    <span class="k">return</span> <span class="n">root</span>
</code></pre></div></div> </li> <li> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// note: using a class is only necessary if you want to store data at each node.</span>
<span class="c1">// otherwise, you can implement a trie using only hash maps.</span>
<span class="kd">class</span> <span class="nc">TrieNode</span> <span class="o">{</span>
    <span class="c1">// you can store data at nodes if you wish</span>
    <span class="kt">int</span> <span class="n">data</span><span class="o">;</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Character</span><span class="o">,</span> <span class="nc">TrieNode</span><span class="o">&gt;</span> <span class="n">children</span><span class="o">;</span>
    <span class="nc">TrieNode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">children</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="nc">TrieNode</span> <span class="nf">buildTrie</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">TrieNode</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TrieNode</span><span class="o">();</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="nl">word:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">TrieNode</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="nl">c:</span> <span class="n">word</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">curr</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">curr</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="k">new</span> <span class="nc">TrieNode</span><span class="o">());</span>
            <span class="o">}</span>
            <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">.</span><span class="na">children</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c1">// at this point, you have a full word at curr</span>
        <span class="c1">// you can perform more logic here to give curr an attribute if you want</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">root</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div> </li> </ul> <h2 id="dijkstras-algorithm">Dijkstra‚Äôs algorithm</h2> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">math</span> <span class="kn">import</span> <span class="n">inf</span>
<span class="kn">from</span> <span class="n">heapq</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">distances</span> <span class="o">=</span> <span class="p">[</span><span class="n">inf</span><span class="p">]</span> <span class="o">*</span> <span class="n">n</span>
<span class="n">distances</span><span class="p">[</span><span class="n">source</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">heap</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="n">source</span><span class="p">)]</span>

<span class="k">while</span> <span class="n">heap</span><span class="p">:</span>
    <span class="n">curr_dist</span><span class="p">,</span> <span class="n">node</span> <span class="o">=</span> <span class="nf">heappop</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">curr_dist</span> <span class="o">&gt;</span> <span class="n">distances</span><span class="p">[</span><span class="n">node</span><span class="p">]:</span>
        <span class="k">continue</span>
    
    <span class="k">for</span> <span class="n">nei</span><span class="p">,</span> <span class="n">weight</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">node</span><span class="p">]:</span>
        <span class="n">dist</span> <span class="o">=</span> <span class="n">curr_dist</span> <span class="o">+</span> <span class="n">weight</span>
        <span class="k">if</span> <span class="n">dist</span> <span class="o">&lt;</span> <span class="n">distances</span><span class="p">[</span><span class="n">nei</span><span class="p">]:</span>
            <span class="n">distances</span><span class="p">[</span><span class="n">nei</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist</span>
            <span class="nf">heappush</span><span class="p">(</span><span class="n">heap</span><span class="p">,</span> <span class="p">(</span><span class="n">dist</span><span class="p">,</span> <span class="n">nei</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Code"/><category term="Python"/><summary type="html"><![CDATA[A collection of code templates for common patterns in data structures and algorithms]]></summary></entry><entry><title type="html">Dynamic Programming</title><link href="https://hrishikeshh.github.io/blog/2024/dynamic-prog/" rel="alternate" type="text/html" title="Dynamic Programming"/><published>2024-01-10T14:14:00+00:00</published><updated>2024-01-10T14:14:00+00:00</updated><id>https://hrishikeshh.github.io/blog/2024/dynamic-prog</id><content type="html" xml:base="https://hrishikeshh.github.io/blog/2024/dynamic-prog/"><![CDATA[<blockquote> <p><strong>Objective</strong> : Assuming this as a first writeup of the series, the aim is to set the foundation of Dynamic Programming fundamentals along with a generic framework to disintegrate any coding interview problem into components.</p> </blockquote> <hr/> <h3 id="1-pre-requisites">1. Pre-Requisites</h3> <ul> <li>Fundamental understanding of Recurrence relation, Divide &amp; Conquer methodology and especially DFS traversal.</li> <li>Time \((Big-O)\) and Space complexities of Recurrence Relation. (<em>Master Theorem</em>)</li> <li>Operations based on Arrays &amp; List.</li> <li>Basic Understanding of Matrix traversals.</li> </ul> <hr/> <h3 id="2-basic-foundation">2. Basic Foundation</h3> <h4 id="21-introduction">2.1 Introduction</h4> <ul> <li> <p><strong>What does word ‚ÄúDynamic‚Äù signifies in Dynamic Programming ?</strong></p> <p>Well actual history is that, DP was invented by Richard Bellman (pre-cursor to Bellman Ford Algorithm) and he claimed that he invented Dynamic Programming to hide the fact that he was doing mathematical research. He was working at RAND under a Secretary of Defence who had a pathological fear towards the word ‚Äúresearch‚Äù so he settled on the term ‚ÄúDynamic‚Äù since it will be difficult to give meaning to it and not even a congressman could object to it. Basically it sounded cool.</p> </li> </ul> <p>For a conceptual understanding, let‚Äôs start with a classical example of <strong>Fibonacci Numbers</strong>.</p> <p>For given \(F(n)\), return the value for any given n.</p> \[\displaylines{ F(n) = \begin{cases} 0, &amp; \text{if $n = 0$}\\ 1, &amp; \text{if $n = 1$}\\ F(n - 1) + F(n - 2), &amp; \text{if $n &gt; 1$} \end{cases} }\] <ul> <li> <p>Then Subproblem graph for Fibonacci will be :-</p> <pre><code class="language-mermaid">  graph TB
      F4[4] --&gt; F3[3]
      F4[4] --&gt; F2[2]
      F3[3] --&gt; F1[1]
      F3[3] --&gt; F2[2]
      F2[2] --&gt; F1[1]
      F2[2] --&gt; F0[0]
</code></pre> <p>A naive approach if translated into a recursive code will be :</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">fibonacci</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
  	<span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
  	  <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
  	<span class="o">}</span>
    <span class="k">return</span> <span class="nf">fibonacci</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="o">);</span>
  <span class="o">}</span>
</code></pre></div> </div> </li> <li> <p><strong>What will be the time complexity of this naive recursive code ?</strong></p> <p>An initial assumption might be that it is \(O(2^n)\), as it is a recursive formula that branches twice each call, but this isn‚Äôt the best upper-bound.</p> <p>The complexity of¬†<code class="language-plaintext highlighter-rouge">fibonacci</code>¬†is \(O(Fn) = O(œï^n)\). This is approximately \(O(1.618^n)\). Still awful, but a little better than the initial assumption of \(O(2^n)\).</p> <p><br/></p> <p>But if you closely notice in the function call tree, the computations are being re-done and hence adding complexities. These computations could be avoided by storing the computed values and reusing it futher. For example a simpler iterative solution of this problem :-</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">fibonacciIterative</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
  	<span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">sum</span><span class="o">;</span>
    
    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="n">n1</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="n">n2</span><span class="o">)</span>    <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
    	
  	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
  	  <span class="n">sum</span> <span class="o">=</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="o">;</span>
  	  <span class="n">n1</span> <span class="o">=</span> <span class="n">n2</span><span class="o">;</span>
      <span class="n">n2</span> <span class="o">=</span> <span class="n">sum</span><span class="o">;</span>
    <span class="o">}</span>
  	<span class="k">return</span> <span class="n">n2</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div> </div> </li> <li> <p><strong>What will be the time complexity of this simpler iterative code ?</strong> (‚úÖ Test)</p> <p>Time complexity \(\approx O(n)\)</p> </li> </ul> <p><br/></p> <ul> <li> <p><strong>How to distinct divide and conquer from dynamic programming?</strong></p> <p>In divide and conquer, problems are divided into <strong><em>disjoint subproblems</em></strong>, the subproblem graph would degrade to a <strong><em>tree structure</em></strong>, each subproblem other than the base problems (here it is each individual element in the array) will only have out degree equals to 1. (e.g. Merge sort function call tree).</p> <p>In comparison, in the case of fibonacci sequence, some problems would have out degree larger than one, which makes the network a graph instead of a tree structure. This characteristics is directly induced by the fact that the <strong><em>subproblems overlap</em></strong> ‚Äì that is, <strong><em>subproblems share subprolems</em></strong>. For example, <em>f(4)</em> and f(3) share f(2), and f(3) and f(2) shares f(1).</p> <blockquote> <p>üí° Dynamic programming is simplifying a complicated problem by breaking it down into¬†<strong>simpler sub-problems</strong>¬†in a recursive manner.</p> </blockquote> </li> </ul> <h3 id="22-why-it-is-required-">2.2 Why it is required ?</h3> <p>Dynamic programming is an optimization methodology over the complete search solutions for typical optimization problems. Dynamic Programming‚Äôs core principle is to solve each subproblem only once by saving and reusing its solution. Therefore, comparing with its naive counterpart ‚Äì <em>Complete Search</em>:</p> <ol> <li>Dynamic Programming avoids the redundant recomputation met in its compete search counterpart as demonstrated in the last section.</li> <li>Dynamic Programming uses additional memory as a trade-off for better computation/time efficiency; it serves as an example of a time-space trade-off. In most cases, the space overhead is well-worthy; it can decrease the time complexity dramatically from exponential \(O(K^n)\) to polynomial level \(O(n)\).</li> </ol> <p><br/></p> <h3 id="23-where-can-it-be-implemented">2.3 Where can it be implemented?</h3> <p>Dynamic programming problems are normally asked in its certain way and its naive solution shows certain time complexity (mostly exponential). So for a clear understanding I would like to put it this way which is way more simpler thant textbooks by providing the situations when to use or not to use dynamic programming as Do‚Äôs and Do-nots.</p> <p><strong>Do‚Äôs</strong> : Dynamic programming fits for the optimizing the following problems which are either exponential or polynomial complexity using complete search :-</p> <ol> <li>Optimization: Compute the maximum or minimum value;</li> <li>Counting: Count the total number of solutions;</li> <li>Checking if a solution work</li> </ol> <p><strong>Do Nots</strong> : In the following cases we might not be able to apply Dynamic Programming:</p> <ol> <li>When the naive solution has a low time complexity already such as \(O(n^2)\) or \(O(n^3)\).</li> <li>When the input dataset is a set while not an array or string or matrix, 90% chance we will not use DP.</li> <li>When the overlapping subproblems apply but it is not optimization problems thus we can not identify the suboptimial substructure property and thus find its recurrence function. For example, same problem context as in Dos but instead we are required to obtain or print all solutions, this is when we need to retreat back to the use of DFS+memo(top-down) instead of DP.</li> </ol> <h2><br/></h2> <h3 id="24-how-can-it-be-implementedapproached-">2.4 How can it be implemented/approached ?</h3> <blockquote> <p>üí° Note : While teaching, the educator should give a bird eye overview about the two possible approaches to students so that they can have a mental framework to place the details mentioned in <strong><em>Illustration section</em></strong> later.</p> </blockquote> <p>In this section, we have provided two forms of dynamic programming solutions: memoization and tabulation, as two different ways of bringing the caching mechanism into practice. In this section, we focus on the iterative tabulation and generalize its four key elements and practical guidelines for importants steps.</p> <ul> <li>Dynamic programming for optimizing the problems fall into the broadly three categories: <ol> <li><strong>Optimization</strong>: Compute the maximum or minimum value;</li> <li><strong>Counting</strong>: Count the total number of solutions;</li> <li><strong>Checking</strong>¬†if a solution works or not, True or False;</li> </ol> </li> <li>Now to fit in the above 3 categories, the problem must show 2 essential properties : <ul> <li>Overlapping subproblems.</li> <li>Optimal substructures.</li> </ul> </li> </ul> <p>Before understanding the approach, we must get familiar with these two properties of the subproblems : -</p> <ul> <li> <p><strong>What are Overlapping Subproblems ?</strong></p> <p>When a recursive algorithm revisits the same subproblem repeatedly, we say that the optimization problem has overlapping subproblems. where one subproblem is reached by multiple other subproblem. When subproblems are disjoint such as seen in merge sort and binary search, dynamic programming would not be helping.</p> </li> <li> <p><strong>Optimal Substructure</strong></p> <p>A given problem has optimal substructure property if the optimal solution of the given problem can be obtained by using optimal solutions of its subproblems. Only if optimal substructure property applied we can find the recurrence relation function which is a key step in implementation as we have seen from the above two examples. Optimal substructures varies across problem domains in two ways:</p> <ol> <li>Subproblem space: how many subproblems an optimal solution to the original problem uses. For example, in Fibonacci sequence, each integer in range [0, n] is a subproblem, which makes the n + 1 as the total subproblem space. The state of each subproblem is the optimal solution for that subproblem which is f(n).</li> <li> <p><strong>State Choice</strong>: how many choices we have in determining which subproblem(s) to use to decide the recurrence function for the current state. In Fibonacci sequence, each state only relies on two preceding states as seen in recurrence function f(i) = f(i ‚àí 1) + f(i ‚àí 2), thus making it constant cost.</p> <p>Subproblem space and state choice together not only formulates the recurrent relation with which we very much have the implementation in hand. Together they also decide the time and space complexity we will need to tackle our dynamic programming problems</p> </li> </ol> </li> </ul> <p><br/></p> <p><strong>Two Forms of Dynamic Programming Solution</strong></p> <ul> <li>There are two ways either <strong>recursive</strong> or <strong>iterative</strong> in general to add space mechanism into naive complete search to construct our dynamic programming solution.</li> </ul> <blockquote> <p>üí° But do remember that we cannot eliminate recursive thinking completely. We will always have to define a recursive relation irrespective of the approach we use.</p> </blockquote> <p><img src="/assets/img/posts/dp/design.png" alt="Design"/></p> <ul> <li> <p><strong>Top-down + Memoization (recursive DFS)</strong></p> <p>We start from larger problem (from top) and recursively search the subproblems space (to bottom) until the leaf node. This method is built on top of <em>Depth-First Graph Search</em> together with Divide and Conquer Methodology which treat each node as a subproblem and return its solution to its caller so that it can be used to build up its solution.</p> <p>Following a top-down fashion as is in divide and conquer, along the process, in the recursive call procedure, a hashmap is relied on to save and search solutions. The memoization works in such way that at the very first time that the subproblem is solved it will be saved in the hashmap, and whenever this problem is met again, it finds the solution and returns it directly instead of computing again.</p> <p>The key elements of this style of dynamic programming is:</p> <ol> <li>Define subproblem;</li> <li>Develop solution using Depth-first Graph search and Divide and conquer (<em>leave alone the recomputation</em>).</li> <li>Adding hashmap to save and search the state of each subproblem</li> </ol> </li> </ul> <p><br/></p> <ul> <li> <p><strong>Bottom-up + Tabulation (iterative)</strong></p> <p>Different from the last method, which use recursive calls, in this method, we approach the subproblems from the smallest subproblems, and construct the solutions to larger subproblems using the tabulaized result. The nodes in the subproblem graph is visited in a reversed topological sort order. This means that to reconstruct the state of current subproblem, all dependable (predecessors) have already be computed and saved.</p> <ul> <li>The memoization method applies better for beginners that who have decent understanding of divide and conquer. However, once you have enough practice, the tabulation should be more intuitive compared with recursive solution. Usually, dynamic programming solution to a problem refers to the solution with tabulation.</li> </ul> </li> </ul> <p><br/></p> <p><strong>Five Steps to Solve Dynamic Programming</strong></p> <p>This is a general guideline for dynamic programming ‚Äì memoization or tabulation. Key advice ‚Äì being ‚Äúflexbile‚Äù.</p> <p>Given a real problem, all in all, we are credited with our understanding of the concepts in computer science. Thus, we should not be too bothered or stressed that if you can not come up with a ‚Äúperfect‚Äù answer.</p> <ul> <li><strong>Step 1</strong> : Read the question: search for the key words of the problem patterns: counting, checking, or maximum/minimum.</li> <li><strong>Step 2</strong> : Come up with the most naive solution ASAP: analyze its time complexity. Is it a typical DFS solution? Try draw a SUBPROBLEM GRAPH to get visualization. Is there space for optimization?</li> <li><strong>Step 3</strong> : Is there overlapping? Can you define the optimal substructure/recurrence function?</li> <li><strong>Step 4</strong> : If the conclusion is YES, try to define the Five key elements so that we can solve it using the preferable tabulation. If you can figure it out intuitively just like that, great! What to do if not? Maybe retreat to use memoization, which is a combination of divide and conquer, DFS, and memoization.</li> <li><strong>Step 5</strong>. What if we were just so nervous that or time is short, we just go ahead and implement the complete search solution instead. With implementation is better than nothing. With the implementation in hand, maybe we can figure it out later.</li> </ul> <p><br/></p> <p><strong>Five Key Elements of Tabulation</strong></p> <p>As the first guideline of Tabulation, we summarize the four key elements for the implementation of dynamic programming:</p> <ul> <li> <p><strong>Step 4.1</strong> : <strong>Subproblem and State</strong></p> <p>Define what the subproblem space, what is the optimal state/solution for each subproblem. In practice, it would normally be the the total/the maximum/minimum for subproblem. This requires us to know how to divide problem into subproblems.</p> </li> <li> <p><strong>Step 4.2</strong> : <strong>State Transfer (Recurrence) Function</strong>:</p> <p>Derive the function that how we can get current state by using result from previous computed state(s). This requires us to identify the optimal substructure and know how to make state choice.</p> </li> <li> <p><strong>Step 4.3</strong> : <strong>Assignment and Initialization</strong>:</p> <p>Followed by knowing the subproblem space, we typically assign a space data structure and initialize its values. For base or edge cases, we might need to initialize different than the other more general cases</p> </li> <li> <p><strong>Step 4.4</strong> : <strong>Iteration</strong>:</p> <p>Decide the order of iterating through the subproblem space thus we can scan each subproblem/state exact and only once. Using the subproblem graph, and visit the subproblms in reversed topological order is a good way to go.</p> </li> <li> <p><strong>Step 4.5</strong> : <strong>Answer</strong>:</p> <p>Decide which state or a combination of all states such as the the max/min of all the state is the final result needed.</p> </li> </ul> <p><br/></p> <p><strong>Complexity Analysis</strong></p> <ul> <li>The complexity analysis of the tabulation is seemingly more straightforward compared with its counterpart ‚Äì the recursive memoization. For the tabulation, we can simply draw conclusion without any prior knowledge of the dynamic programming by observing the for loops and its recurrence function. However, for both variant, there exists a common analysis method.</li> <li>The core points to analyze complexity involving dynamic programming is: <ol> <li>The subproblem space <code class="language-plaintext highlighter-rouge">|S|</code>, that is the total number of subproblems; and</li> <li>The number of state choice needed to construct each state <code class="language-plaintext highlighter-rouge">|C|</code>.</li> </ol> <p>By multiplying these two points, we can draw the conclusion of its time complexity as <code class="language-plaintext highlighter-rouge">O(|S|.|C|)</code>.</p> </li> <li>For example, if the subproblem space is n and if each state i relies on <ol> <li>Only one or two previous states as we have seen in the example of Fibonacci Sequence, it makes the time complexity <em><code class="language-plaintext highlighter-rouge">O(n)</code></em>; and</li> <li>All previous states in range <code class="language-plaintext highlighter-rouge">[0, i ‚àí 1]</code> as seen in the example of Longest Increasing Subsequence, which can be viewed as \(O(n)\) to solve each subproblem, this brings up the complexity up to \(O(n^2)\).</li> </ol> </li> </ul> <p>To help you decide which style that you should take when presented with a DP solution, here‚Äôs the trade-off comparison between top-down Memoization and bottom-up Tabulation</p> <p><br/></p> <table> <thead> <tr> <th>¬†</th> <th>Memoization</th> <th>Tabulation</th> </tr> </thead> <tbody> <tr> <td><strong>Pros</strong></td> <td>1. A natural transformation from normal recursive complete search. <br/> 2. Compute subproblems only when necessary, sometimes this can be faster.</td> <td>1. Faster if many sub-problems are revisited as there is no overhead of recursive calls. <br/> 2. Can save memory space with dynamic programming ‚Äòon-the-fly‚Äô technique.</td> </tr> <tr> <td><strong>Cons</strong></td> <td>1. Slower if many subproblems are revisited due to overhead of recursive calls. <br/> 2. If there are n states, it can use up to O(n) table size which might lead to Memory Limit Exceeded(MLE) for some hard problems. <br/> 3. Faces stack overflow due to the recursive calls.</td> <td>1. For programmers who are inclined with recursion, this may not be intuitive.</td> </tr> </tbody> </table> <h3 id="25-illustration">2.5 Illustration</h3> <p>For a details illustration, let‚Äôs start with one of the generic parent problem called Knapsack Problem. This problem type gives the foundational aspect for other variants too. Hence a deeper understanding of this problem type is required for understanding the inner working of Dynamic Programming.</p> <blockquote> <p>üí° The Knapsack problem, as the name suggests, is the problem faced by a person who has a knapsack with a limited capacity and wants to carry the most valuable items. In other words, we are given <em>N</em> items, each having a specific weight and a value, and a knapsack with a maximum capacity.</p> </blockquote> <blockquote> <p>Our job is to put as many items as possible in the knapsack such that the cumulative weight of the items doesn‚Äôt exceed the knapsack‚Äôs capacity, and the cumulative value of the items in the knapsack is maximized.</p> </blockquote> <p><br/></p> <p><strong><em>Problem statement</em></strong> : The¬†<strong>0/1 Knapsack</strong>¬†is a special case of the Knapsack problem where item selection has some constraints. In general, the following restrictions are applied:</p> <ul> <li>A maximum of one item can be selected of each kind, that is, the number of items of each kind in the knapsack is either zero or one.</li> <li>We can‚Äôt take a fraction of an item, that is, we either have to take the complete item or leave it.</li> </ul> <p><br/></p> <blockquote> <p>üí° Mathematically, Given a set of¬†<em>n</em>¬†items, each with a value \(v_i\)¬†and weight¬†\(w_i\), and a knapsack with maximum weight capacity¬†<em>C</em>¬†, we have the following target:</p> </blockquote> \[Maximize \sum_{i=1}^n x_i v_i\] \[Subject~~to \sum_{i=1}^n x_i v_i \ \leq C\] <p>with¬†\(x_i ‚àà \{0,1\}\)¬†representing the number of instances of item <em>i</em>¬†in the knapsack.</p> <p><br/></p> <ul> <li>Before proceeding, let‚Äôs check if the students have understood the problem statement type. Here are few problem statements, let‚Äôs see if these are 0/1 Knapsack problem type or other types. <ul> <li>Given a set of positive numbers, find a triplet whose sum is equal to a given number S (‚úÖ 0/1 Knapsack)</li> <li>Select one car of each model to be displayed in the showroom so that the overall worth of the displayed cars is maximized. (‚úÖ 0/1 Knapsack)</li> <li>Given an unlimited number of tennis balls, calculate the number of balls that can be placed in a box. (‚ùå Other type)</li> <li>Given an array of numbers, calculate the number of ways in which its elements can be selected to make sum S. (‚ùå Other type)</li> <li>Plan a vacation in such a way that the maximum number of cities is visited in the specified budget. (‚úÖ 0/1 Knapsack)</li> </ul> </li> </ul> <p>Let‚Äôs start solving the problem with our proposed Five Step Framework from section 2.4</p> <p><strong>Step 1 - 3</strong></p> <ul> <li>Search for keyword aiming for optimization : <strong>Maximize</strong> the value of whole knapsack.</li> <li>Start with Naive Solution just to get an approximate idea of time complexity and the typical DFS approach. It will be a good idea to start with Subproblem graph.</li> <li>Check for overlapping subproblems : Yes.</li> <li>Can a recurrence relation be defined among subproblems : Yes.</li> </ul> <p><strong>Step 4</strong></p> <ul> <li>Now we have two options here to proceed with : Memoization or Tabulation. Let‚Äôs first explore the Tabulation Approach :-</li> <li><strong>Step 4.3 : Assignment and Initialization</strong> <ul> <li>Assign a space datastructure and initialize its base, edge and normal values.</li> <li>Since this is profit maximizing problem hence the least amount of profit in case of a null set or null capacity will 0. Moreover we will have to take an extra row and column to consider this condition.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// Initialize a table where individual rows represent items</span>
  <span class="c1">// and columns represent the weight of the knapsack</span>
    
  <span class="kd">final</span> <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="no">W</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    
  <span class="c1">//Extra row and coloums are taken to consider the empty set condition.</span>
  <span class="kt">int</span><span class="o">[][]</span> <span class="no">DP</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">capacity</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
    
  <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
  	<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">capacity</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
  		<span class="k">if</span><span class="o">(</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>  <span class="no">DP</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  	<span class="o">}</span>
  <span class="o">}</span>
</code></pre></div> </div> </li> <li><strong>Step 4.4 : Iteration</strong> <ul> <li>Determine the order of iterating through subproblem space to avoid repeated computation hence visiting the subproblem in a reverse topological order (bottom up) is a good way to go.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  		<span class="kd">public</span> <span class="kt">int</span> <span class="nf">bottomUpDP</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">wt</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">capacity</span><span class="o">){</span>
          <span class="kd">final</span> <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="n">wt</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
  				<span class="kt">int</span> <span class="no">DP</span><span class="o">[][]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">capacity</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
    
          <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
              <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="no">W</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
                  <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
                      <span class="no">DP</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                      <span class="k">continue</span><span class="o">;</span>
                  <span class="o">}</span>
                  <span class="k">if</span><span class="o">(</span><span class="n">j</span> <span class="o">-</span> <span class="n">wt</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">){</span>
                      <span class="no">DP</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="no">DP</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">],</span> <span class="no">DP</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="n">wt</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]]</span> <span class="o">+</span> <span class="n">val</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]);</span>
                  <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                      <span class="no">DP</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="no">DP</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
                  <span class="o">}</span>
              <span class="o">}</span>
          <span class="o">}</span>
          <span class="k">return</span> <span class="no">DP</span><span class="o">[</span><span class="no">N</span><span class="o">][</span><span class="n">capacity</span><span class="o">];</span>
      <span class="o">}</span>
</code></pre></div> </div> </li> <li><strong>Step 4.5 : Answer</strong> <ul> <li>Final result will be stored at the \(DP[N][capacity]\) since this value allows for all the items to be considered for the maximum possible capacity. Hence this is the answer.</li> </ul> </li> </ul> <hr/> <p>The above elaboration might have given you a fair idea of the approach. Now let‚Äôs say you have a knapsack capacity of 5 and a list of items with weights and values as follows:</p> \[weights = [1, 2, 3, 5] ~~~~~~~~~~~~~~~~values = [10, 5, 4, 8]\] <p>There are four ways of storing items in the knapsack, such that the combined weight of stored items is less than or equal to the knapsack‚Äôs capacity.</p> <ul> <li>Item of weight 1 and weight 2, with a total value of 15.</li> <li>Item of weight 1 and weight 3, with a total value of 14.</li> <li>Item of weight 2 and weight 3, with a total value of 9.</li> <li>Item of weight 5, with a value of 8.</li> </ul> <p>Though all of the combinations described above are valid, we need to select the one with the maximum value. Hence, we will select items with weights 1 and 2, as they give us the maximum value of 15.</p> <p><strong>Constraints:</strong></p> \[\displaylines{ 1‚â§ capacity ‚â§10^4\\ 1‚â§ values.length ‚â§10^3\\ 1‚â§ values[i] ‚â§10^4\\ 1‚â§ weights[i] ‚â§ capacity\\ weights.length == values.length\\ }\] <table> <thead> <tr> <th>No.</th> <th>capacity</th> <th>weights</th> <th>Values</th> <th>n</th> <th>Maximum Value</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>30</td> <td>[10, 20, 30]</td> <td>[22, 33, 44]</td> <td>3</td> <td>55</td> </tr> <tr> <td>2</td> <td>5</td> <td>[1, 2, 3, 5]</td> <td>[10, 5, 4, 8]</td> <td>4</td> <td>15</td> </tr> </tbody> </table> <p><strong>Naive approach</strong></p> <ul> <li> <p>A naive approach is to find all combinations of items such that their combined weight is less than the capacity of the knapsack and the total value is maximized.</p> <p>For example, we have the following list of values and weights with the capacity of¬†55:</p> \[\displaylines{values: [3,5,2,7]\\ weights: [3,1,2,4]\\}\] </li> </ul> <p>To find the maximum value, we try all the possible combinations:</p> \[3+5 (total~weight~4) = 8\\ 3+2 (total~weight~5) = 5\\ 5+2 (total~weight~3) = 7\\ 5+7 (total~weight~5) = 12\\\] <p>The calculation above shows that we need a recursive solution to make all possible combinations. In other words, we divide the problem into sub-problems, and for each item, if its weight is less than the capacity, we check whether we should place it in the knapsack.</p> <p>Let‚Äôs implement the algorithm as discussed above:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.stream.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Knapsack</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findKnapsack</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">weights</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Base case</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">capacity</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// check if the weight of the nth item is less than capacity then</span>
        <span class="c1">// either </span>
        <span class="c1">// We include the item and reduce the weigth of item from the total weight</span>
        <span class="c1">// or </span>
        <span class="c1">// We don't include the item</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">weights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="n">capacity</span><span class="o">)</span>
            <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span>
                <span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">findKnapsack</span><span class="o">(</span><span class="n">capacity</span> <span class="o">-</span> <span class="n">weights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">),</span> <span class="n">weights</span><span class="o">,</span> <span class="n">values</span><span class="o">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">),</span>
                <span class="n">findKnapsack</span><span class="o">(</span><span class="n">capacity</span><span class="o">,</span> <span class="n">weights</span><span class="o">,</span> <span class="n">values</span><span class="o">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span>
                <span class="o">);</span>
                
        <span class="c1">// Item can't be added in our knapsack </span>
        <span class="c1">// if it's weight is greater than the capacity</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="nf">findKnapsack</span><span class="o">(</span><span class="n">capacity</span><span class="o">,</span> <span class="n">weights</span><span class="o">,</span> <span class="n">values</span><span class="o">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="c1">// Driver code</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">weights</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;(</span>
            <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">20</span><span class="o">)));</span>

        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;(</span>
            <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">8</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">3</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">12</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">13</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">12</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">18</span><span class="o">,</span> <span class="mi">20</span><span class="o">)));</span>

        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">capacity</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;(</span>
            <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">6</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">));</span>

        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">n</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;(</span>
            <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>
        
        <span class="c1">// You can uncomment the lines below and check how this recursive solution causes a time-out</span>
        
        <span class="c1">// weights.add(Arrays.asList(63,  55,  47,  83,  61,  82,   6,  34,   9,  38,   6,  69,  17,</span>
        <span class="c1">//     50,   7, 100, 101,   4,  41,  28, 119,  78,  98,  38,  75,  35,</span>
        <span class="c1">//      8,  10,  16,  93,  34,  23,  51,  79, 118,  86,  85, 109,  88,</span>
        <span class="c1">//     72,  99,  36,  21,  80,  42,  44,  62,   7,  54,   7,   6,   0,</span>
        <span class="c1">//     65,  25,  44,  86,  76,  18,  11,  10, 104,  17,  36,  91,  78,</span>
        <span class="c1">//     88,  79, 103,   1,   4,  34,  94,  73,  21,   8,   9,  79,  25,</span>
        <span class="c1">//    106,  76,  39,  78,   1,  92, 104,  84,  40, 100, 116,  84,  23,</span>
        <span class="c1">//     79, 109,  79,  71,  72, 116,  90,  79,  26));</span>
        <span class="c1">// values.add(Arrays.asList(35,  47,   8, 103,  83,  71,  11, 107,   9,  34,  41,  54,  73,</span>
        <span class="c1">//     72, 108, 100,  46,  27,  79,  98,  49,  63,  41, 116,  57,  86,</span>
        <span class="c1">//     51,  47,  88, 118,  65,   0,  64,  11,  45,  47,  36,  50, 114,</span>
        <span class="c1">//     90, 105,  55,  93,  12,  73,  96,  50,  27,  36,  97,  12,  21,</span>
        <span class="c1">//    107,  34, 106,  37,  84,  38, 110,  60,  34, 104,  92,  56,  94,</span>
        <span class="c1">//    109,  81,  17,  24, 106,  50,  68,  90,  73,  46,  99,   5,   5,</span>
        <span class="c1">//     22,  27,  58,  24,  20,  80,  37,   1,  16,  39,  26,  32,  12,</span>
        <span class="c1">//     47,  22,  28,  50,  95,   6, 105, 101,  20));</span>
        <span class="c1">// capacity.add(1000);</span>
        <span class="c1">// n.add(100);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">values</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">". We have a knapsack of capacity "</span> <span class="o">+</span> <span class="n">capacity</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="s">" and we are given the following list of item values and weights:"</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">30</span><span class="o">]).</span><span class="na">replace</span><span class="o">(</span><span class="sc">'\0'</span><span class="o">,</span> <span class="sc">'-'</span><span class="o">));</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Weights   |     Values"</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">30</span><span class="o">]).</span><span class="na">replace</span><span class="o">(</span><span class="sc">'\0'</span><span class="o">,</span> <span class="sc">'-'</span><span class="o">));</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%-10d|%6d\n"</span><span class="o">,</span> <span class="n">weights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">),</span> <span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
            <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">findKnapsack</span><span class="o">(</span><span class="n">capacity</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">weights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">n</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nThe maximum we can earn is: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">100</span><span class="o">]).</span><span class="na">replace</span><span class="o">(</span><span class="sc">'\0'</span><span class="o">,</span> <span class="sc">'-'</span><span class="o">));</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Time complexity</strong></p> <p>The time complexity of the naive approach is¬†\(O(2^n)\), where¬†<em>n</em>¬†is the total number of items. This is because we have two possible choices every time, either to include the item or not.</p> <p><strong>Space complexity</strong></p> <p>As the maximum depth of the recursive call tree is¬†<em>n</em>, and each call stores its data on the stack, the space complexity of this approach is¬†<em>O</em>(<em>n</em>).</p> <hr/> <p><strong>Optimized solution using dynamic programming</strong></p> <p>Now, let‚Äôs improve the recursive solution using top-down and bottom-up approaches.</p> <p><strong>Top-down solution</strong></p> <p>The top-down solution, commonly known as the¬†<strong>memoization</strong>¬†technique, is an enhancement of the recursive solution. It overcomes the problem of calculating redundant solutions over and over again by storing them in a table.</p> <p>In the recursive approach, the two variables that kept changing in each call were the total weight of the knapsack and the number of items we had. So, we‚Äôll use these two variables to define each distinct subproblem. Therefore, we need a 2-D array to store these values and the result of any given subproblem when we encounter it for the first time. At any later time, if we encounter the same sub-problem, we can return the stored result from the table with an¬†\(O(1)\)¬†lookup instead of recalculating that subproblem.</p> <p>Let‚Äôs implement the algorithm as discussed above:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.stream.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Knapsack</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findKnapsackRec</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">weights</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">dp</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Base case</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">capacity</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
            <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
        
        <span class="c1">// If we have solved it earlier, then return the result from memory</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">capacity</span><span class="o">]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">capacity</span><span class="o">];</span>
    
        <span class="c1">// Otherwise, we solve it for the new combination and save the results in the memory</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">weights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="n">capacity</span><span class="o">){</span>
            <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">capacity</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span>
                <span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">findKnapsackRec</span><span class="o">(</span><span class="n">capacity</span> <span class="o">-</span> <span class="n">weights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">),</span> <span class="n">weights</span><span class="o">,</span> <span class="n">values</span><span class="o">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">dp</span><span class="o">),</span>
                <span class="n">findKnapsackRec</span><span class="o">(</span><span class="n">capacity</span><span class="o">,</span> <span class="n">weights</span><span class="o">,</span> <span class="n">values</span><span class="o">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">dp</span><span class="o">)</span>
                <span class="o">);</span>
            <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">capacity</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">capacity</span><span class="o">]</span> <span class="o">=</span> <span class="n">findKnapsackRec</span><span class="o">(</span><span class="n">capacity</span><span class="o">,</span> <span class="n">weights</span><span class="o">,</span> <span class="n">values</span><span class="o">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">dp</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">capacity</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findKnapsack</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">weights</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">capacity</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="nl">row:</span><span class="n">dp</span><span class="o">)</span>
            <span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>

        <span class="k">return</span> <span class="nf">findKnapsackRec</span><span class="o">(</span><span class="n">capacity</span><span class="o">,</span> <span class="n">weights</span><span class="o">,</span> <span class="n">values</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">dp</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="c1">// Driver code</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">weights</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;(</span>
            <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">20</span><span class="o">)));</span>

        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;(</span>
            <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">8</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">3</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">12</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">13</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">12</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">18</span><span class="o">,</span> <span class="mi">20</span><span class="o">)));</span>

        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">capacity</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;(</span>
            <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">6</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">));</span>

        <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">n</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;(</span>
            <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>
        
        <span class="c1">// Let's uncomment this and check the effect of dynamic programming using memoization</span>
        
        <span class="c1">// weights.add(Arrays.asList(63,  55,  47,  83,  61,  82,   6,  34,   9,  38,   6,  69,  17,</span>
        <span class="c1">//     50,   7, 100, 101,   4,  41,  28, 119,  78,  98,  38,  75,  35,</span>
        <span class="c1">//      8,  10,  16,  93,  34,  23,  51,  79, 118,  86,  85, 109,  88,</span>
        <span class="c1">//     72,  99,  36,  21,  80,  42,  44,  62,   7,  54,   7,   6,   0,</span>
        <span class="c1">//     65,  25,  44,  86,  76,  18,  11,  10, 104,  17,  36,  91,  78,</span>
        <span class="c1">//     88,  79, 103,   1,   4,  34,  94,  73,  21,   8,   9,  79,  25,</span>
        <span class="c1">//    106,  76,  39,  78,   1,  92, 104,  84,  40, 100, 116,  84,  23,</span>
        <span class="c1">//     79, 109,  79,  71,  72, 116,  90,  79,  26));</span>
        <span class="c1">// values.add(Arrays.asList(35,  47,   8, 103,  83,  71,  11, 107,   9,  34,  41,  54,  73,</span>
        <span class="c1">//     72, 108, 100,  46,  27,  79,  98,  49,  63,  41, 116,  57,  86,</span>
        <span class="c1">//     51,  47,  88, 118,  65,   0,  64,  11,  45,  47,  36,  50, 114,</span>
        <span class="c1">//     90, 105,  55,  93,  12,  73,  96,  50,  27,  36,  97,  12,  21,</span>
        <span class="c1">//    107,  34, 106,  37,  84,  38, 110,  60,  34, 104,  92,  56,  94,</span>
        <span class="c1">//    109,  81,  17,  24, 106,  50,  68,  90,  73,  46,  99,   5,   5,</span>
        <span class="c1">//     22,  27,  58,  24,  20,  80,  37,   1,  16,  39,  26,  32,  12,</span>
        <span class="c1">//     47,  22,  28,  50,  95,   6, 105, 101,  20));</span>
        <span class="c1">// capacity.add(1000);</span>
        <span class="c1">// n.add(100);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">values</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">". We have a knapsack of capacity "</span> <span class="o">+</span> <span class="n">capacity</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="s">" and we are given the following list of item values and weights:"</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">30</span><span class="o">]).</span><span class="na">replace</span><span class="o">(</span><span class="sc">'\0'</span><span class="o">,</span> <span class="sc">'-'</span><span class="o">));</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Weights   |     Values"</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">30</span><span class="o">]).</span><span class="na">replace</span><span class="o">(</span><span class="sc">'\0'</span><span class="o">,</span> <span class="sc">'-'</span><span class="o">));</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%-10d|%6d\n"</span><span class="o">,</span> <span class="n">weights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">),</span> <span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
            <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">findKnapsack</span><span class="o">(</span><span class="n">capacity</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">weights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">n</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nThe maximum we can earn is: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">100</span><span class="o">]).</span><span class="na">replace</span><span class="o">(</span><span class="sc">'\0'</span><span class="o">,</span> <span class="sc">'-'</span><span class="o">));</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <p><strong>Time complexity</strong></p> <p>We avoided redundant calculations in this approach by storing all the intermediate results in a 2-D array in¬†<em>O</em>(1)¬†time. Therefore, the time complexity of this approach is reduced to¬†\(O(n√ócapacity)\), where¬†<em>n</em>¬†is the number of items.</p> <p><strong>Space complexity</strong></p> <p>We now need¬†\(O(n√ócapacity)\)¬†space in memory to store intermediate values.</p> <hr/> <p><strong>Bottom-up solution</strong></p> <p>The bottom-up solution, also known as the¬†<strong>tabulation</strong>¬†technique, is an iterative method of solving dynamic programming problems. Here, we will create a 2-D array of size \((n + 1)‚àó(capacity + 1).\) The row indicates the values of the available items, and the column shows the capacity of the knapsack at any given point.</p> <p>We will initialize the array so that when the row or column is 0, the value in the table will also be 0. Next, we will check if the weight of an item is less than the capacity. If yes, we have two options: either we can add the item to the knapsack, or we can skip it. If we include the item, the optimal solution is the maximum of the two values. Otherwise, if the weight of an item is greater than the capacity, then we don‚Äôt include the item in the knapsack.</p> <p>The algorithm work as follows:</p> <ul> <li>In the first row, we have no items to pick from, so regardless of the knapsack‚Äôs capacity, we can only accumulate a value of 0.</li> <li>In the second row, we can only pick the first item. With a knapsack of capacity 1, we wouldn‚Äôt be able to pick this item. If the knapsack capacity is 2, we can pick this item. As the knapsack capacity increased beyond¬†<code class="language-plaintext highlighter-rouge">value[0]</code>, we couldn‚Äôt get any more value because there was only one item to choose from.</li> <li> <p>In the third row, we have the first two items available to be picked. For a knapsack of capacity c, we can either try to pick the second item or skip it. If we choose to skip an item, the value we can accumulate is the value one can obtain using only the first item and a knapsack of capacity c. This is already known and stored in¬†<code class="language-plaintext highlighter-rouge">dp[1][c]</code>.</p> <p>If we decide to pick this item, it will take up a weight of¬†<code class="language-plaintext highlighter-rouge">weights[1]</code>¬†in the knapsack while contributing an additional value of¬†<code class="language-plaintext highlighter-rouge">values[1]</code>. However, we need to track how much value we can accumulate with the remaining capacity in the knapsack, i.e.,¬†<code class="language-plaintext highlighter-rouge">capacity - weights[1]</code>¬†while using only the first item. This value is already stored in¬†<code class="language-plaintext highlighter-rouge">dp[1][c-weights[1]]</code>. So, the total value, in this case, becomes¬†<code class="language-plaintext highlighter-rouge">values[1] + dp[1][c-weights[1]]</code>. Since we‚Äôre trying to maximize the value, we‚Äôll pick the more valuable of the two choices, i.e., picking or not picking the second item.</p> </li> <li> <p>In general, the cell in row¬†<code class="language-plaintext highlighter-rouge">i</code>, column¬†<code class="language-plaintext highlighter-rouge">j</code>¬†can be filled with the following formula:</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span><span class="err">¬†</span><span class="o">=</span><span class="err">¬†</span><span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">)+</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="n">weights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">)],</span><span class="err">¬†</span><span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="err">¬†</span><span class="o">-</span><span class="err">¬†</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]);</span>
</code></pre></div> </div> <p>Let‚Äôs implement the algorithms as discussed above :-</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">import</span> <span class="nn">java.util.stream.*</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
    
  <span class="kd">class</span> <span class="nc">Knapsack</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findKnapsack</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">weights</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">values</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
          <span class="c1">// create a table to hold intermediate values</span>
          <span class="kt">int</span><span class="o">[][]</span> <span class="n">dp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="n">capacity</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
          <span class="k">for</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="nl">row:</span><span class="n">dp</span><span class="o">)</span> <span class="o">{</span>
              <span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">row</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
          <span class="o">}</span>
        
          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">dp</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
              <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">dp</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span> <span class="o">{</span>
                  <span class="c1">// initialize the table with 0 when either the row or column is 0</span>
                  <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
                      <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    
                  <span class="c1">// check if the weight of an item is less than the capacity</span>
                  <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">weights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="o">)</span>
                      <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)+</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="n">weights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)],</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]);</span>
    
                  <span class="c1">// we don't include the item if the weight is greater than the capacity.                </span>
                  <span class="k">else</span>
                      <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">];</span>
              <span class="o">}</span>
          <span class="o">}</span>
        
          <span class="k">return</span> <span class="n">dp</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">capacity</span><span class="o">];</span>
      <span class="o">}</span>
    
      <span class="c1">// Driver code</span>
      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    
          <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">weights</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;(</span>
              <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">20</span><span class="o">)));</span>
    
          <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;(</span>
              <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">8</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">3</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">12</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">13</span><span class="o">),</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">12</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">17</span><span class="o">,</span> <span class="mi">13</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="mi">15</span><span class="o">,</span> <span class="mi">18</span><span class="o">,</span> <span class="mi">20</span><span class="o">)));</span>
    
          <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">capacity</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;(</span>
              <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">6</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">20</span><span class="o">));</span>
    
          <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">n</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;(</span>
              <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">10</span><span class="o">));</span>
            
          <span class="c1">// Let's uncomment this to see the benefit of using dynamic programming with tabulation</span>
            
          <span class="c1">// weights.add(Arrays.asList(63,  55,  47,  83,  61,  82,   6,  34,   9,  38,   6,  69,  17,</span>
          <span class="c1">//     50,   7, 100, 101,   4,  41,  28, 119,  78,  98,  38,  75,  35,</span>
          <span class="c1">//      8,  10,  16,  93,  34,  23,  51,  79, 118,  86,  85, 109,  88,</span>
          <span class="c1">//     72,  99,  36,  21,  80,  42,  44,  62,   7,  54,   7,   6,   0,</span>
          <span class="c1">//     65,  25,  44,  86,  76,  18,  11,  10, 104,  17,  36,  91,  78,</span>
          <span class="c1">//     88,  79, 103,   1,   4,  34,  94,  73,  21,   8,   9,  79,  25,</span>
          <span class="c1">//    106,  76,  39,  78,   1,  92, 104,  84,  40, 100, 116,  84,  23,</span>
          <span class="c1">//     79, 109,  79,  71,  72, 116,  90,  79,  26));</span>
          <span class="c1">// values.add(Arrays.asList(35,  47,   8, 103,  83,  71,  11, 107,   9,  34,  41,  54,  73,</span>
          <span class="c1">//     72, 108, 100,  46,  27,  79,  98,  49,  63,  41, 116,  57,  86,</span>
          <span class="c1">//     51,  47,  88, 118,  65,   0,  64,  11,  45,  47,  36,  50, 114,</span>
          <span class="c1">//     90, 105,  55,  93,  12,  73,  96,  50,  27,  36,  97,  12,  21,</span>
          <span class="c1">//    107,  34, 106,  37,  84,  38, 110,  60,  34, 104,  92,  56,  94,</span>
          <span class="c1">//    109,  81,  17,  24, 106,  50,  68,  90,  73,  46,  99,   5,   5,</span>
          <span class="c1">//     22,  27,  58,  24,  20,  80,  37,   1,  16,  39,  26,  32,  12,</span>
          <span class="c1">//     47,  22,  28,  50,  95,   6, 105, 101,  20));</span>
          <span class="c1">// capacity.add(1000);</span>
          <span class="c1">// n.add(100);</span>
    
          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">values</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
              <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
              <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">". We have a knapsack of capacity "</span> <span class="o">+</span> <span class="n">capacity</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="s">" and we are given the following list of item values and weights:"</span><span class="o">);</span>
              <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">30</span><span class="o">]).</span><span class="na">replace</span><span class="o">(</span><span class="sc">'\0'</span><span class="o">,</span> <span class="sc">'-'</span><span class="o">));</span>
              <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Weights   |     Values"</span><span class="o">);</span>
              <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">30</span><span class="o">]).</span><span class="na">replace</span><span class="o">(</span><span class="sc">'\0'</span><span class="o">,</span> <span class="sc">'-'</span><span class="o">));</span>
              <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span>
                  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%-10d|%6d\n"</span><span class="o">,</span> <span class="n">weights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">),</span> <span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
              <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">findKnapsack</span><span class="o">(</span><span class="n">capacity</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">weights</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">n</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
              <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\nThe maximum we can earn is: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">);</span>
              <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">100</span><span class="o">]).</span><span class="na">replace</span><span class="o">(</span><span class="sc">'\0'</span><span class="o">,</span> <span class="sc">'-'</span><span class="o">));</span>
              <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
          <span class="o">}</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div> </div> </li> </ul> <p><strong>Time complexity</strong></p> <p>We have created a 2-D array to store the results of sub-problems that would be used later on, and filling each row in this table takes¬†\(O(1)\)¬†time; therefore, the time complexity of this approach will also be¬†\(O(n√ócapacity).\)</p> <p><strong>Space complexity</strong></p> <p>We need¬†\(O(n√ócapacity)\)¬†space in memory to store the intermediate values.</p> <hr/> <p><strong>Can we do better?</strong></p> <p>You must have noticed in the above algorithm that to fill up a row, we only require the previous rows‚Äôs values; that is, for filling the row against the \(i^\text{th}\) element, we require the values from the previous row representing the¬†\((i-1)^\text{th}\)¬†element. Therefore, there is no point in storing all the previous ¬†\((i-2)~\)rows.</p> <p>We can further improve this approach by using a 1-D array of length¬†\((capacity+1)\)¬†instead of creating a table. Next, we update this array for each element using the same calculation which we used earlier.</p> <p>The time complexity would remain the same,¬†\(O(n√ócapacity)\), because we still have to do the calculation for each element. The space complexity, however, reduces to¬†\(O(capacity)\)¬†since we are only maintaining an array of size¬†\((capacity+1)\).</p> <hr/> <p>Basically DP can be categorized into 4 categories as far as the interview expectations are concerned.</p> <ol> <li>Knapsack</li> <li>Recursive Numbers</li> <li>Longest Common Substring</li> <li>Palindrome Subsequence</li> </ol> <p><br/> We will cover these divisions in further write up along with the possible variants which are more or less based on the generic templates of these problems. To try your hands on the concept we learnt today you are advised to attempt these problems :-</p> <p><br/></p> <ol> <li><a href="https://leetcode.com/problems/target-sum/description/">Target Sum - LeetCode</a></li> <li><a href="https://leetcode.com/problems/partition-equal-subset-sum/description/">Partition Equal Subset Sum - LeetCode</a></li> </ol> <hr/>]]></content><author><name>Hrishikesh</name></author><category term="Articles"/><category term="Notes"/><category term="code,"/><category term="algorithms"/><summary type="html"><![CDATA[Setting up the foundations of Dynamic programming along with a generic framework to disintegrate the problem into components]]></summary></entry><entry><title type="html">Deep Learning</title><link href="https://hrishikeshh.github.io/blog/2024/deep-learning/" rel="alternate" type="text/html" title="Deep Learning"/><published>2024-01-01T00:00:00+00:00</published><updated>2024-01-01T00:00:00+00:00</updated><id>https://hrishikeshh.github.io/blog/2024/deep-learning</id><content type="html" xml:base="https://hrishikeshh.github.io/blog/2024/deep-learning/"><![CDATA[<h2 id="books">Books</h2> <hr/> <div class="row mt-3"> <div class="col-sm-4"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/book/dive-into-dl-480.webp 480w,/assets/img/book/dive-into-dl-800.webp 800w,/assets/img/book/dive-into-dl-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/book/dive-into-dl.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm-8"> <h3>Dive into Deep Learning</h3> <p><u>Good Part</u>: This books is really comprehensive with a perfect balance between theory and code to keep your <i>FOMO</i> in check while following this resource. Covers the theory implementation using both, TensorFlow and PyTorch. There is an open-sourced handy <a href="https://d2l.ai/index.html">web-version</a> as well as PDF. </p> <p><u>Bad Part</u>: Quite exhaustive, if you are looking for something to be completed in a week.</p> </div> </div> <div class="row mt-3"> <div class="col-sm-4"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/book/dl-with-python-480.webp 480w,/assets/img/book/dl-with-python-800.webp 800w,/assets/img/book/dl-with-python-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/book/dl-with-python.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm-8"> <h3>Deep Learning with Python</h3> <p>I completed this book before above one and this gave me a more intuitive understanding of Deep Learning Landscape. Short and crisp introduction to basics and then branching into computer vision and NLP.</p> </div> </div> <hr/> <h2 id="visualization">Visualization</h2> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/cnn.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> </div> <div class="caption"> Convolutional Neural Network in work. <a href="https://x.com/Hamptonism/status/1794469409999786451"><i>Source</i></a> </div>]]></content><author><name></name></author><category term="[&quot;Notes&quot;]"/><category term="deep-learning"/><category term="math"/><category term="code"/><summary type="html"><![CDATA[A curated list of resources for a comprehensive understanding of deep learning.]]></summary></entry><entry><title type="html">The Beauty of LaTeX</title><link href="https://hrishikeshh.github.io/blog/2023/latex/" rel="alternate" type="text/html" title="The Beauty of LaTeX"/><published>2023-12-02T00:00:00+00:00</published><updated>2023-12-02T00:00:00+00:00</updated><id>https://hrishikeshh.github.io/blog/2023/latex</id><content type="html" xml:base="https://hrishikeshh.github.io/blog/2023/latex/"><![CDATA[<blockquote> <p>Common Mistakes, and Advice for Typesetting Beautiful, Delightful Proofs</p> </blockquote> <p>When was the first time you had to use <a href="https://www.latex-project.org/">LaTeX</a>? If you are like most people, it was probably suddenly forced upon you during your first math or CS class where you had to start writing proofs, with minimal guidance on how to get started other than something along the lines of ‚Äúhey, check out this link on how to get things setup, and here are some basic commands, now go wild!‚Äù.</p> <p>Unfortunately, this meant that while many people have good operational knowledge of LaTeX and can get the job done, there are still many small mistakes and best practices which are not followed, which are not corrected by TAs as they are either not severe enough to warrant a note, or perhaps even the TAs themselves are not aware of them.</p> <p>In this post, we cover some common mistakes that are made by LaTeX practitioners (even in heavily cited papers), and how to address them. This post assumes that the reader has some working knowledge of LaTeX.</p> <h2 id="typesetting-as-a-form-of-art">Typesetting as a Form of Art</h2> <p>It is important to get into the right mindset whenever you typeset a document. You are not simply ‚Äúwriting‚Äù a document ‚Äî you are crafting a work of art that combines both the precision and creativity of your logical thinking, as well as the elegance of a beautifully typeset writing. The amount of attention and care you put into the presentation is indicative of the amount of thought you put into the content. Therefore, having good style is not only delightful and aesthetically pleasing to read, but it also serves to establish your ethos and character. One can tell that someone puts a lot of effort into their work and takes great pride in them when they pay attention even to the smallest of details.</p> <p>Furthermore, adopting good practices also helps to avoid you making typographical mistakes in your proof, such as missing parenthesis or wrong positioning. This could often lead to cascading errors that are very annoying to fix when you discover them later on. There are ways to replicate the strict typechecking of statically typed languages to ensure that mistakes in your expressions can be caught at compile-time.</p> <h2 id="common-mistakes-and-how-to-fix-them">Common Mistakes, and How To Fix Them</h2> <p>In the following section, we take a look at common mistakes that people make, and how they can be avoided or fixed. We cover style mistakes first, since the ideas behind them are more general. All the screenshotted examples come from peer-reviewed papers that have been published to top conferences, so they are definitely very common mistakes and you shouldn‚Äôt feel bad for making them. The important thing is that you are aware of them now so that your style will gradually improve over time.</p> <h2 id="style-mistakes">Style Mistakes</h2> <p>We take a look at style mistakes, which impairs reader understanding, and makes it easy to commit other sorts of errors.</p> <h3 id="paired-delimiters">Paired Delimiters</h3> <p>Parenthesis, brackets, and pipes are examples of delimiters that are used to mark the start and end of formula expressions. As they come in pairs, a common mistake is accidentally leaving out the closing delimiter, especially for nested expressions. Even if you don‚Äôt forget to do so, there is the issue of incorrect sizing.</p> <p>For instance, consider the following way of expressing the Topologist‚Äôs sine curve, which is an example of a topology that is connected but not path connected:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex">T = <span class="k">\{</span> ( x, <span class="k">\sin</span> <span class="k">\frac</span><span class="p">{</span>1<span class="p">}{</span>x<span class="p">}</span> ) : x <span class="k">\in</span> (0, 1] <span class="k">\}</span> <span class="k">\cup</span> <span class="k">\{</span> ( 0, 0 ) <span class="k">\}</span></code></pre></figure> <p>which is rendered as follows:</p> \[T = \{(x, \sin \frac{1}{x} ) : x \in (0, 1] \} \cup \{ ( 0, 0 ) \}\] <p>The problem here is that the curly braces have the wrong size, as they should be large enough to cover the \(\sin \frac{1}{x}\) expression vertically.</p> <p>The wrong way of resolving this would be to use delimiter size modifiers, i.e <code class="language-plaintext highlighter-rouge">\bigl, \Bigl, \biggl</code> paired with <code class="language-plaintext highlighter-rouge">\bigr, \Bigr, \biggr</code> and the like. This is tedious and error-prone, since it will even happily let you match delimiters with different sizes. Indeed, I came across the following formula in a paper recently, where the outer right square brackets was missing and the left one had the wrong size:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/paired_delim-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/paired_delim-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/paired_delim-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/paired_delim.webp" class="z-depth-1 center" width="500px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> What happens when you don't use paired delimiters </figcaption> </figure> <p>The correct way to do this would be to use paired delimiters, which will automatically adjust its size based on its contents, and automatically result in a compile error if the matching right delimiter is not included, or nested at the wrong level. Some of them are given below:</p> <table class="table table-bordered table-sm"> <thead> <tr> <th>Raw LaTeX</th> <th>Rendered</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">\left( \frac{1}{x} \right) </code></td> <td>\(\left( \frac{1}{x} \right)\)</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">\left[ \frac{1}{x} \right] </code></td> <td>\(\left[ \frac{1}{x} \right]\)</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">\left\{ \frac{1}{x} \right\} </code></td> <td>\(\left\{ \frac{1}{x} \right\}\)</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">\left\lvert \frac{1}{x} \right\lvert </code></td> <td>\(\left\lvert \frac{1}{x} \right\rvert\)</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">\left\lceil \frac{1}{x} \right\rceil </code></td> <td>\(\left\lceil \frac{1}{x} \right\rceil\)</td> </tr> </tbody> </table> <p>In fact, to make things even simpler and more readable, you can declare paired delimiters for use based on the <code class="language-plaintext highlighter-rouge">mathtools</code> package, with the following commands due to <a href="http://www.cs.cmu.edu/~odonnell/">Ryan O‚ÄôDonnell</a>:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="c">% Make sure you include \usepackage{mathtools}</span>
<span class="k">\DeclarePairedDelimiter\parens</span><span class="p">{</span><span class="k">\lparen</span><span class="p">}{</span><span class="k">\rparen</span><span class="p">}</span>
<span class="k">\DeclarePairedDelimiter\abs</span><span class="p">{</span><span class="k">\lvert</span><span class="p">}{</span><span class="k">\rvert</span><span class="p">}</span>
<span class="k">\DeclarePairedDelimiter\norm</span><span class="p">{</span><span class="k">\lVert</span><span class="p">}{</span><span class="k">\rVert</span><span class="p">}</span>
<span class="k">\DeclarePairedDelimiter\floor</span><span class="p">{</span><span class="k">\lfloor</span><span class="p">}{</span><span class="k">\rfloor</span><span class="p">}</span>
<span class="k">\DeclarePairedDelimiter\ceil</span><span class="p">{</span><span class="k">\lceil</span><span class="p">}{</span><span class="k">\rceil</span><span class="p">}</span>
<span class="k">\DeclarePairedDelimiter\braces</span><span class="p">{</span><span class="k">\lbrace</span><span class="p">}{</span><span class="k">\rbrace</span><span class="p">}</span>
<span class="k">\DeclarePairedDelimiter\bracks</span><span class="p">{</span><span class="k">\lbrack</span><span class="p">}{</span><span class="k">\rbrack</span><span class="p">}</span>
<span class="k">\DeclarePairedDelimiter\angles</span><span class="p">{</span><span class="k">\langle</span><span class="p">}{</span><span class="k">\rangle</span><span class="p">}</span></code></pre></figure> <p>Then you can now use the custom delimiters as follows, taking note that you need the <code class="language-plaintext highlighter-rouge">*</code> for it to auto-resize:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex">T = <span class="k">\braces*</span><span class="p">{</span> <span class="k">\parens*</span><span class="p">{</span> x, <span class="k">\sin</span> <span class="k">\frac</span><span class="p">{</span>1<span class="p">}{</span>x<span class="p">}</span> <span class="p">}</span> : x <span class="k">\in</span> (0, 1] <span class="p">}</span> <span class="k">\cup</span> <span class="k">\braces*</span><span class="p">{</span> <span class="k">\parens*</span><span class="p">{</span> 0, 0 <span class="p">}}</span></code></pre></figure> <p>which gives</p> \[T = \left\{ \left( x, \sin \frac{1}{x} \right) : x \in (0, 1] \right\} \cup \left\{ \left( 0, 0 \right) \right\} \\\] <p>The biggest downside of using custom paired delimiters is having to remember to add the <code class="language-plaintext highlighter-rouge">*</code>, otherwise, the delimiters will not auto-resize. This is pretty unfortunate as it still makes it error-prone. There is a <a href="https://tex.stackexchange.com/questions/1742/automatic-left-and-right-commands/1744#1744">proposed solution</a> floating around on StackExchange that relies on a custom command that makes auto-resizing the default, but it‚Äôs still a far cry from a parsimonious solution.</p> <h3 id="macros-for-saving-time-and-preventing-mistakes">Macros for Saving Time and Preventing Mistakes</h3> <p>Macros can be defined using the <code class="language-plaintext highlighter-rouge">\newcommand</code> command. The basic syntax is <code class="language-plaintext highlighter-rouge">\newcommand{command_name}{command_definition}</code>. For instance, it might get tiring to always type <code class="language-plaintext highlighter-rouge">\boldsymbol{A}</code> to refer to a matrix \(\boldsymbol{A}\), so you can use the following macro:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="c">% Macro</span>
<span class="k">\newcommand</span><span class="p">{</span><span class="k">\bA</span><span class="p">}{</span><span class="k">\boldsymbol</span><span class="p">{</span>A<span class="p">}}</span>

<span class="p">$$</span><span class="nv">\min</span><span class="p">_</span><span class="nb">x </span><span class="nv">\lvert</span><span class="nb"> </span><span class="nv">\bA</span><span class="nb"> x </span><span class="o">-</span><span class="nb"> b </span><span class="nv">\rvert</span><span class="p">_</span><span class="m">2</span><span class="p">^</span><span class="m">2</span><span class="p">$$</span></code></pre></figure> \[\min_x \left\lvert \boldsymbol{A} x - b \right\rvert_2^2\] <p>Macros can also take arguments to be substituted within the definition. This is done by adding a <code class="language-plaintext highlighter-rouge">[n]</code> argument after your command name, where <code class="language-plaintext highlighter-rouge">n</code> is the number of arguments that it should take. You can then reference the positional arguments using <code class="language-plaintext highlighter-rouge">#1, #2,</code> and so on. Here, we create a <code class="language-plaintext highlighter-rouge">\dotprod</code> macro that takes two arguments:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="c">% Macros</span>
<span class="k">\newcommand</span><span class="p">{</span><span class="k">\dotprod</span><span class="p">}</span>[2]<span class="p">{</span><span class="k">\langle</span> #1, #2 <span class="k">\rangle</span><span class="p">}</span>
<span class="k">\newcommand</span><span class="p">{</span><span class="k">\bu</span><span class="p">}{</span><span class="k">\boldsymbol</span><span class="p">{</span>u<span class="p">}}</span>
<span class="k">\newcommand</span><span class="p">{</span><span class="k">\bv</span><span class="p">}{</span><span class="k">\boldsymbol</span><span class="p">{</span>v<span class="p">}}</span>

<span class="p">$$</span><span class="nv">\left\lvert</span><span class="nb"> </span><span class="nv">\dotprod</span><span class="p">{</span><span class="nv">\bu</span><span class="p">}{</span><span class="nv">\bv</span><span class="p">}</span><span class="nb"> </span><span class="nv">\right\rvert</span><span class="p">^</span><span class="m">2</span><span class="nb"> </span><span class="nv">\leq</span><span class="nb"> </span><span class="nv">\dotprod</span><span class="p">{</span><span class="nv">\bu</span><span class="p">}{</span><span class="nv">\bu</span><span class="p">}</span><span class="nb"> </span><span class="nv">\cdot</span><span class="nb"> </span><span class="nv">\dotprod</span><span class="p">{</span><span class="nv">\bv</span><span class="p">}{</span><span class="nv">\bv</span><span class="p">}$$</span></code></pre></figure> \[\left| \langle \mathbf{u}, \mathbf{v} \rangle \right|^2 \leq \langle \mathbf{u}, \mathbf{u} \rangle \cdot \langle \mathbf{v}, \mathbf{v} \rangle\] <p>Macros are incredibly helpful as they help to save time, and ensure that our notation is consistent. However, they can also be used to help to catch mistakes when typesetting grammatically structured things.</p> <p>For instance, when expressing types and terms in programming language theory, there is often a lot of nested syntactical structure, which could make it easy to make mistakes. Consider the following proof:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/macros-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/macros-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/macros-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/macros.webp" class="z-depth-1 center" width="600px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> A proof with a lot of syntactical structure </figcaption> </figure> <p>The details are unimportant, but it is clear that it is easy to miss a letter here or a term there in the proof, given how cumbersome the notation is. To avoid this, I used the following macros, due to <a href="http://www.cs.cmu.edu/~rwh/">Robert Harper</a>:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="k">\newcommand</span><span class="p">{</span><span class="k">\inval</span><span class="p">}</span>[2]<span class="p">{</span><span class="k">\in</span><span class="p">^{</span>(#1)<span class="p">}_</span><span class="k">\mathsf</span><span class="p">{</span>val<span class="p">}</span> #2<span class="p">}</span>
<span class="k">\newcommand</span><span class="p">{</span><span class="k">\foldex</span><span class="p">}</span>[2]<span class="p">{</span><span class="k">\mathsf</span><span class="p">{</span>fold<span class="p">}_{</span>#1<span class="p">}</span>(#2)<span class="p">}</span>
<span class="k">\newcommand</span><span class="p">{</span><span class="k">\recty</span><span class="p">}</span>[2]<span class="p">{</span><span class="k">\mathsf</span><span class="p">{</span>rec<span class="p">}</span>(#1.#2)<span class="p">}</span>
<span class="k">\newcommand</span><span class="p">{</span><span class="k">\Subst</span><span class="p">}</span>[3]<span class="p">{</span><span class="k">\sqbracks</span><span class="p">{{</span>#1<span class="p">}</span><span class="k">\mathord</span><span class="p">{</span>/<span class="p">}{</span>#2<span class="p">}}{</span>#3<span class="p">}}</span></code></pre></figure> <p>And the source for the proof looks like the following:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex">We check that anti-monotonicity continues to hold for recursive types,
by showing that if <span class="p">$</span><span class="nb">m </span><span class="nv">\leq</span><span class="nb"> n</span><span class="p">$</span>, then
<span class="p">$$</span><span class="nv">\foldex</span><span class="p">{</span><span class="nb">X.A</span><span class="p">}{</span><span class="nb">V</span><span class="p">}</span><span class="nb"> </span><span class="nv">\inval</span><span class="p">{</span><span class="nb">n</span><span class="p">}{</span><span class="nv">\recty</span><span class="p">{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}</span><span class="nb"> </span><span class="nv">\text</span><span class="p">{</span><span class="nb"> implies </span><span class="p">}</span><span class="nb"> </span><span class="nv">\foldex</span><span class="p">{</span><span class="nb">X.A</span><span class="p">}{</span><span class="nb">V</span><span class="p">}</span><span class="nb"> </span><span class="nv">\inval</span><span class="p">{</span><span class="nb">m</span><span class="p">}{</span><span class="nv">\recty</span><span class="p">{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}</span><span class="nb">. </span><span class="p">$$</span>

<span class="nt">\begin{proof}</span>
We proceed by induction on <span class="p">$</span><span class="nb">n</span><span class="p">$</span>. 
When <span class="p">$</span><span class="nb">n</span><span class="o">=</span><span class="m">0</span><span class="p">$</span>, the result is trivial, so consider <span class="p">$</span><span class="nb">n </span><span class="nv">\geq</span><span class="nb"> </span><span class="m">0</span><span class="p">$</span>, with the intent to prove it for <span class="p">$</span><span class="nb">n</span><span class="o">+</span><span class="m">1</span><span class="p">$</span>.

Let <span class="p">$</span><span class="nb">m </span><span class="nv">\leq</span><span class="nb"> n </span><span class="o">+</span><span class="nb"> </span><span class="m">1</span><span class="p">$</span>, and assume
<span class="p">$</span><span class="nv">\foldex</span><span class="p">{</span><span class="nb">X.A</span><span class="p">}{</span><span class="nb">V</span><span class="p">}</span><span class="nb"> </span><span class="nv">\inval</span><span class="p">{</span><span class="nb">n</span><span class="o">+</span><span class="m">1</span><span class="p">}{</span><span class="nv">\recty</span><span class="p">{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}$</span>. If <span class="p">$</span><span class="nb">m </span><span class="o">=</span><span class="nb"> n </span><span class="o">+</span><span class="nb"> </span><span class="m">1</span><span class="p">$</span> or <span class="p">$</span><span class="nb">m</span><span class="o">=</span><span class="m">0</span><span class="p">$</span>, we are trivially done, so let <span class="p">$</span><span class="m">0</span><span class="nb"> &lt; m &lt; n</span><span class="o">+</span><span class="m">1</span><span class="p">$</span>.

We want to show that
<span class="p">$</span><span class="nv">\foldex</span><span class="p">{</span><span class="nb">X.A</span><span class="p">}{</span><span class="nb">V</span><span class="p">}</span><span class="nb"> </span><span class="nv">\inval</span><span class="p">{</span><span class="nb">m</span><span class="p">}{</span><span class="nv">\recty</span><span class="p">{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}$</span>.
By definition of step-indexed logical relations~(SILR), it suffices to show
<span class="p">$</span><span class="nb">V </span><span class="nv">\inval</span><span class="p">{</span><span class="nb">m</span><span class="o">-</span><span class="m">1</span><span class="p">}{</span><span class="nv">\Subst</span><span class="p">{</span><span class="nv">\recty</span><span class="p">{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}$</span>.

Since <span class="p">$</span><span class="nv">\foldex</span><span class="p">{</span><span class="nb">X.A</span><span class="p">}{</span><span class="nb">V</span><span class="p">}</span><span class="nb"> </span><span class="nv">\inval</span><span class="p">{</span><span class="nb">n</span><span class="o">+</span><span class="m">1</span><span class="p">}{</span><span class="nv">\recty</span><span class="p">{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}$</span>, by definition of SILR,
<span class="p">$</span><span class="nb">V </span><span class="nv">\inval</span><span class="p">{</span><span class="nb">n</span><span class="p">}{</span><span class="nv">\Subst</span><span class="p">{</span><span class="nv">\recty</span><span class="p">{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}$</span>.

By IH on <span class="p">$</span><span class="nb">V </span><span class="nv">\inval</span><span class="p">{</span><span class="nb">n</span><span class="p">}{</span><span class="nv">\Subst</span><span class="p">{</span><span class="nv">\recty</span><span class="p">{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}$</span>,
we also know <span class="p">$</span><span class="nb">V </span><span class="nv">\inval</span><span class="p">{</span><span class="nb">m</span><span class="o">-</span><span class="m">1</span><span class="p">}{</span><span class="nv">\Subst</span><span class="p">{</span><span class="nv">\recty</span><span class="p">{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}$</span>.

But then by definition of SILR,
<span class="p">$</span><span class="nv">\foldex</span><span class="p">{</span><span class="nb">X.A</span><span class="p">}{</span><span class="nb">V</span><span class="p">}</span><span class="nb"> </span><span class="nv">\inval</span><span class="p">{</span><span class="nb">m</span><span class="p">}{</span><span class="nv">\recty</span><span class="p">{</span><span class="nb">X</span><span class="p">}{</span><span class="nb">A</span><span class="p">}}$</span>, as desired. <span class="k">\qedhere</span>
<span class="nt">\end{proof}</span></code></pre></figure> <p>It is definitely still not the most pleasant thing to read, but at least now you will be less likely to miss an argument or forget to close a parenthesis.</p> <h3 id="non-breaking-lines">Non-breaking lines</h3> <p>Expressions which are logically a single unit should stay on the same line, instead of being split apart mid-sentence. Cue the following bad example from another paper:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/nbsp-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/nbsp-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/nbsp-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/nbsp.webp" class="z-depth-1 center" width="300px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Expressions that are broken apart </figcaption> </figure> <p>In the area marked in red, we had the expression that was defining \(\tau^i\) get cut in half, which is very jarring visually and interrupts the reader‚Äôs train of thought.</p> <p>To ensure that expressions do not get split, simply wrap it around in curly braces. For instance,</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="k">\tau</span>=<span class="k">\left</span>(s<span class="p">_</span>1, a<span class="p">_</span>1, <span class="k">\ldots</span>, a<span class="p">_{</span>t-1<span class="p">}</span>, s<span class="p">_</span>t<span class="k">\right</span>)</code></pre></figure> <p>would be wrapped by <code class="language-plaintext highlighter-rouge">{</code> and <code class="language-plaintext highlighter-rouge">}</code> on both sides and become</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="p">{</span> <span class="k">\tau</span>=<span class="k">\left</span>(s<span class="p">_</span>1, a<span class="p">_</span>1, <span class="k">\ldots</span>, a<span class="p">_{</span>t-1<span class="p">}</span>, s<span class="p">_</span>t<span class="k">\right</span>) <span class="p">}</span></code></pre></figure> <p>So if we render the following snippet, which would otherwise have expressions split in half without the wrapped curly braces:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex">We denote the historical trajectory as 
<span class="p">${</span><span class="nb"> </span><span class="nv">\tau</span><span class="o">=</span><span class="nv">\left</span><span class="o">(</span><span class="nb">s</span><span class="p">_</span><span class="m">1</span><span class="nb">, a</span><span class="p">_</span><span class="m">1</span><span class="nb">, </span><span class="nv">\ldots</span><span class="nb">, a</span><span class="p">_{</span><span class="nb">t</span><span class="o">-</span><span class="m">1</span><span class="p">}</span><span class="nb">, s</span><span class="p">_</span><span class="nb">t</span><span class="nv">\right</span><span class="o">)</span><span class="nb"> </span><span class="p">}$</span>
and action-observation history <span class="p">$</span><span class="o">(</span><span class="nv">\mathrm</span><span class="p">{</span><span class="nb">AOH</span><span class="p">}</span><span class="o">)</span><span class="p">$</span> for
player <span class="p">$</span><span class="nb">i</span><span class="p">$</span> as 
<span class="p">${</span><span class="nb"> </span><span class="nv">\tau</span><span class="p">^</span><span class="nb">i</span><span class="o">=</span><span class="nv">\left</span><span class="o">(</span><span class="nv">\Omega</span><span class="p">^</span><span class="nb">i</span><span class="nv">\left</span><span class="o">(</span><span class="nb">s</span><span class="p">_</span><span class="m">1</span><span class="nv">\right</span><span class="o">)</span><span class="nb">, a</span><span class="p">_</span><span class="m">1</span><span class="nb">, </span><span class="nv">\ldots</span><span class="nb">, a</span><span class="p">_{</span><span class="nb">t</span><span class="o">-</span><span class="m">1</span><span class="p">}</span><span class="nb">, </span><span class="nv">\Omega</span><span class="p">^</span><span class="nb">i</span><span class="nv">\left</span><span class="o">(</span><span class="nb">s</span><span class="p">_</span><span class="nb">t</span><span class="nv">\right</span><span class="o">)</span><span class="nv">\right</span><span class="o">)</span><span class="nb"> </span><span class="p">}$</span>,
 which encodes the trajectory from player <span class="p">$</span><span class="nb">i</span><span class="p">$</span> 's point of view.</code></pre></figure> <p>we get the following positive result where there is additional whitespace between the justified text on the first line, to compensate for the expression assigning \(\tau\) to stay on the same line:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/nbsp-positive-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/nbsp-positive-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/nbsp-positive-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/nbsp-positive.webp" class="z-depth-1 center" width="300px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Expressions that brace together stays together </figcaption> </figure> <h3 id="non-breaking-space-with-">Non-breaking space with <code class="language-plaintext highlighter-rouge">~</code></h3> <p>When referencing figures and equations, you want the text and number (i.e Figure 10) to end up on the same line. This is a negative example, where the region underlined in red shows how it was split up:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/figure-truncated-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/figure-truncated-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/figure-truncated-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/figure-truncated.webp" class="z-depth-1 center" width="500px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> The phrase "Figure 2" was truncated in half </figcaption> </figure> <p>To remedy this, add a <code class="language-plaintext highlighter-rouge">~</code> after <code class="language-plaintext highlighter-rouge">Figure</code>, which LaTeX interprets as a non-breaking space:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex">We evaluated the policy periodically during training by testing it without exploration noise.
Figure~<span class="k">\ref</span><span class="p">{</span>fig:env-perf<span class="p">}</span> shows the performance curve for a selection of environments. </code></pre></figure> <p>This would ensure that ‚ÄúFigure 2‚Äù always appears together.</p> <h3 id="expressions-should-be-punctuated-like-sentences">Expressions Should Be Punctuated Like Sentences</h3> <p>Your document is meant to be read, and it should follow the rules and structures of English (or whichever language you are writing in). This means that mathematical expressions should also be punctuated appropriately, which allows it to flow more naturally and make it easier for the reader to follow.</p> <p>Consider the following example that does not use punctuation:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/sentence-negative-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/sentence-negative-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/sentence-negative-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/sentence-negative.webp" class="z-depth-1 center" width="400px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Expressions which are not punctuated are tiring to read </figcaption> </figure> <p>In the region highlighted in red, the expressions do not carry any punctuation at all, and by the end of the last equation (Equation 15), I am almost out of breath trying to process all of the information. In addition, it does not end in a full stop, which does not give me an affordance to take a break mentally until the next paragraph.</p> <p>Instead, commas should be added after each expression where the expression does not terminate, and the final equation should be ended by a full stop. Here is a good example of punctuation that helps to guide the reader along the author‚Äôs train of thought:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/sentence-multiline-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/sentence-multiline-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/sentence-multiline-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/sentence-multiline.webp" class="z-depth-1 center" width="400px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Appropriate use of commas and full stop to guide the reader </figcaption> </figure> <p>Here is another good example of how using commas for the equations allow the text to flow naturally, where it takes the form of ‚Äúanalogously, observe that we have [foo] and [bar], where the inequality‚Ä¶‚Äù:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/sentence-two-exp-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/sentence-two-exp-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/sentence-two-exp-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/sentence-two-exp.webp" class="z-depth-1 center" width="400px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Punctuation allows the content to flow naturally </figcaption> </figure> <p>This even extends to when you pack several equations on a single line, which is common when you are trying to fit the page limit for conference submissions:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/sentence-singleline-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/sentence-singleline-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/sentence-singleline-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/sentence-singleline.webp" class="z-depth-1 center" width="400px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Appropriate use of punctuation when multiple equations are on a single line </figcaption> </figure> <h3 id="the-proof-environment">The <code class="language-plaintext highlighter-rouge">proof</code> environment</h3> <p>The <code class="language-plaintext highlighter-rouge">proof</code> environment from the <code class="language-plaintext highlighter-rouge">amsthm</code> package is great for signposting to your readers where a proof starts and ends. For instance, consider how it is used in the following example:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="k">\textit</span><span class="p">{</span>Problem: Show that if <span class="p">$</span><span class="o">(</span><span class="nb">x</span><span class="p">_</span><span class="nb">n</span><span class="o">)</span><span class="p">_</span><span class="nb">n</span><span class="p">$</span> converges to <span class="p">$</span><span class="nb">x</span><span class="p">$</span> in the usual sense, then
<span class="p">$</span><span class="nv">\lim</span><span class="p">_{</span><span class="nb">n </span><span class="nv">\to</span><span class="nb"> </span><span class="nv">\infty</span><span class="p">}</span><span class="nb"> x</span><span class="p">_</span><span class="nb">n </span><span class="o">=</span><span class="nb"> </span><span class="nv">\lim</span><span class="p">_{</span><span class="nv">\mathcal</span><span class="p">{</span><span class="nb">F</span><span class="p">}}</span><span class="nb"> x</span><span class="p">_</span><span class="nb">n</span><span class="p">$</span>.<span class="p">}</span>

Suppose that <span class="p">$</span><span class="o">(</span><span class="nb">x</span><span class="p">_</span><span class="nb">n</span><span class="o">)</span><span class="p">_</span><span class="nb">n</span><span class="p">$</span> converges to <span class="p">$</span><span class="nb">x</span><span class="p">$</span>. We show that this <span class="p">$</span><span class="nb">x</span><span class="p">$</span> is also the
<span class="p">$</span><span class="nv">\mathcal</span><span class="p">{</span><span class="nb">F</span><span class="p">}$</span>-limit of <span class="p">$</span><span class="o">(</span><span class="nb">x</span><span class="p">_</span><span class="nb">n</span><span class="o">)</span><span class="p">_</span><span class="nb">n</span><span class="p">$</span>.

<span class="nt">\begin{proof}</span>
    Take any <span class="p">$</span><span class="nv">\varepsilon</span><span class="p">$</span>. Then we know that for some large enough <span class="p">$</span><span class="nb">N</span><span class="p">$</span>, if <span class="p">$</span><span class="nb">n </span><span class="nv">\geq</span><span class="nb"> N</span><span class="p">$</span>, then
    <span class="p">$</span><span class="nb">x</span><span class="p">_</span><span class="nb">n </span><span class="nv">\in</span><span class="nb"> B</span><span class="p">_</span><span class="nv">\varepsilon</span><span class="o">(</span><span class="nb">x</span><span class="o">)</span><span class="p">$</span>. Since every non-principal ultrafilter on <span class="p">$</span><span class="nv">\N</span><span class="p">$</span> contains
    <span class="p">$</span><span class="nv">\mathcal</span><span class="p">{</span><span class="nb">F</span><span class="p">}_</span><span class="nv">\infty</span><span class="p">$</span>, then <span class="p">$</span><span class="nv">\mathcal</span><span class="p">{</span><span class="nb">F</span><span class="p">}$</span> also contains <span class="p">$</span><span class="nb"> </span><span class="nv">\left\{</span><span class="nb"> n : n </span><span class="nv">\geq</span><span class="nb"> N </span><span class="nv">\right\}</span><span class="nb"> </span><span class="p">$</span>,
    since the complement is finite. Therefore since filters are closed upwards, any
    sequence items <span class="p">$</span><span class="nb">x</span><span class="p">_</span><span class="nb">n</span><span class="p">$</span> with <span class="p">$</span><span class="nb">n &lt; N</span><span class="p">$</span> that happen to fall in the ball around <span class="p">$</span><span class="nb">x</span><span class="p">$</span>,
    i.e, <span class="p">$</span><span class="nb">x</span><span class="p">_</span><span class="nb">n </span><span class="nv">\in</span><span class="nb"> B</span><span class="p">_</span><span class="nv">\varepsilon</span><span class="o">(</span><span class="nb">x</span><span class="o">)</span><span class="p">$</span>
    is also contained in some filter element, so 
    <span class="p">$</span><span class="nv">\left\{</span><span class="nb">  n </span><span class="nv">\in</span><span class="nb"> </span><span class="nv">\N</span><span class="nb"> : </span><span class="nv">\lvert</span><span class="nb"> x</span><span class="p">_</span><span class="nb">n </span><span class="o">-</span><span class="nb"> x </span><span class="nv">\rvert</span><span class="nb"> &lt; </span><span class="nv">\varepsilon</span><span class="nb"> </span><span class="nv">\right\}</span><span class="nb"> </span><span class="nv">\in</span><span class="nb"> </span><span class="nv">\mathcal</span><span class="p">{</span><span class="nb">F</span><span class="p">}$</span>,
    as desired.
<span class="nt">\end{proof}</span></code></pre></figure> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/proof-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/proof-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/proof-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/proof.webp" class="z-depth-1 center" width="600px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Signposting using the `proof` environment </figcaption> </figure> <p>This will helpfully highlight the start of your argument with <em>‚ÄúProof‚Äù</em>, and terminate it with a square that symbolizes QED.</p> <h3 id="terminate-proofs-with-explicit-qedhere">Terminate Proofs with Explicit <code class="language-plaintext highlighter-rouge">\qedhere</code></h3> <p>Consider the same example as previously, but now you accidentally added an additional newline before the closing <code class="language-plaintext highlighter-rouge">\end{proof}</code>, which happens pretty often:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="c">% Same as previously, contents elided for brevity</span>
<span class="nt">\begin{proof}</span>
    <span class="c">% Same as previously, contents elided for brevity</span>
    <span class="p">$</span><span class="nb">x</span><span class="p">_</span><span class="nb">n </span><span class="nv">\in</span><span class="nb"> B</span><span class="p">_</span><span class="nv">\varepsilon</span><span class="o">(</span><span class="nb">x</span><span class="o">)</span><span class="p">$</span>
    is also contained in some filter element, so 
    <span class="p">$</span><span class="nv">\left\{</span><span class="nb">  n </span><span class="nv">\in</span><span class="nb"> </span><span class="nv">\N</span><span class="nb"> : </span><span class="nv">\lvert</span><span class="nb"> x</span><span class="p">_</span><span class="nb">n </span><span class="o">-</span><span class="nb"> x </span><span class="nv">\rvert</span><span class="nb"> &lt; </span><span class="nv">\varepsilon</span><span class="nb"> </span><span class="nv">\right\}</span><span class="nb"> </span><span class="nv">\in</span><span class="nb"> </span><span class="nv">\mathcal</span><span class="p">{</span><span class="nb">F</span><span class="p">}$</span>,
    as desired.

    <span class="c">% Extra newline here!</span>
<span class="nt">\end{proof}</span></code></pre></figure> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/qedhere-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/qedhere-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/qedhere-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/qedhere.webp" class="z-depth-1 center" width="600px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Misaligned QED symbol </figcaption> </figure> <p>This results in the above scenario, where the QED symbol now appears on the next line by itself, which throws the entire text off-balance visually. To avoid such things happening, always include an explicit <code class="language-plaintext highlighter-rouge">\qedhere</code> marker at the end of your proof, which would cause it to always appear on the line that it appears after:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="c">% Same as previously, contents elided for brevity</span>
<span class="nt">\begin{proof}</span>
    <span class="c">% Same as previously, contents elided for brevity</span>
    <span class="p">$</span><span class="nb">x</span><span class="p">_</span><span class="nb">n </span><span class="nv">\in</span><span class="nb"> B</span><span class="p">_</span><span class="nv">\varepsilon</span><span class="o">(</span><span class="nb">x</span><span class="o">)</span><span class="p">$</span>
    is also contained in some filter element, so 
    <span class="p">$</span><span class="nv">\left\{</span><span class="nb">  n </span><span class="nv">\in</span><span class="nb"> </span><span class="nv">\N</span><span class="nb"> : </span><span class="nv">\lvert</span><span class="nb"> x</span><span class="p">_</span><span class="nb">n </span><span class="o">-</span><span class="nb"> x </span><span class="nv">\rvert</span><span class="nb"> &lt; </span><span class="nv">\varepsilon</span><span class="nb"> </span><span class="nv">\right\}</span><span class="nb"> </span><span class="nv">\in</span><span class="nb"> </span><span class="nv">\mathcal</span><span class="p">{</span><span class="nb">F</span><span class="p">}$</span>,
    as desired. <span class="k">\qedhere</span> <span class="c">% Always add \qedhere once you are done!</span>

    <span class="c">% Extra newline here!</span>
<span class="nt">\end{proof}</span></code></pre></figure> <p>We would then get the same result as before originally, when we did not have the extra newline.</p> <h3 id="spacing">Spacing</h3> <p>Spacing matters a lot in readability, as it helps to separate logical components. For instance, the following example fails to add spacing before the differential of the variable \(dz\):</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/integral-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/integral-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/integral-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/integral.webp" class="z-depth-1 center" width="500px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Lack of spacing before "dz" </figcaption> </figure> <p>This might seem innocuous, but consider the following example that makes the issue more explicit:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex">P(X) = <span class="k">\int</span> xyz dx</code></pre></figure> \[P(X) = \int xyz dx\] <p>Now we can really see that the quantities are running into each other, and it becomes hard to interpret. Instead, we can add math-mode spacing, summarized in the following table:</p> <table class="table table-bordered table-sm"> <thead> <tr> <th>Spacing Expression</th> <th>Type</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">\;</code></td> <td>Thick space</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">\:</code></td> <td>Medium space</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">\,</code></td> <td>Thin space</td> </tr> </tbody> </table> <p>So our new expression now looks like:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex">P(X) = <span class="k">\int</span> xyz <span class="k">\,</span> dx</code></pre></figure> \[P(X) = \int xyz \, dx\] <p>which is much more readable.</p> <h3 id="align-environment-for-multiline-equations"><code class="language-plaintext highlighter-rouge">align*</code> Environment for Multiline Equations</h3> <p>When using the <code class="language-plaintext highlighter-rouge">align*</code> environment, make sure that your ampersands <code class="language-plaintext highlighter-rouge">&amp;</code> appear before the symbol that you are aligning against. This ensures that you get the correct spacing.</p> <p>For instance, the following is wrong, where the <code class="language-plaintext highlighter-rouge">&amp;</code> appears after the <code class="language-plaintext highlighter-rouge">=</code>:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="nt">\begin{align*}</span>
    <span class="k">\nabla</span><span class="p">_{</span><span class="k">\mu</span><span class="p">}</span> (<span class="k">\mathbb</span><span class="p">{</span>E<span class="p">}_{</span>x<span class="k">\sim</span> q<span class="p">_{</span><span class="k">\mu</span><span class="p">}}</span> f(x))  = <span class="p">&amp;</span> <span class="k">\nabla</span><span class="p">_{</span><span class="k">\mu</span><span class="p">}</span> <span class="k">\int</span><span class="p">_</span>x f(x) q<span class="p">_{</span><span class="k">\mu</span><span class="p">}</span>(x) dx                                     <span class="k">\\</span>
                                                    = <span class="p">&amp;</span> <span class="k">\int</span><span class="p">_</span>x f(x) (<span class="k">\nabla</span><span class="p">_{</span><span class="k">\mu</span><span class="p">}</span> <span class="k">\log</span> q<span class="p">_{</span><span class="k">\mu</span><span class="p">}</span>(x))  q<span class="p">_{</span><span class="k">\mu</span><span class="p">}</span>(x) dx                  <span class="k">\\</span>
                                                    = <span class="p">&amp;</span> <span class="k">\mathbb</span><span class="p">{</span>E<span class="p">}_{</span>x <span class="k">\sim</span> q<span class="p">_{</span><span class="k">\mu</span><span class="p">}}</span> <span class="k">\left</span>(f(x) <span class="k">\nabla</span><span class="p">_{</span><span class="k">\mu</span><span class="p">}</span> <span class="k">\log</span> q<span class="p">_{</span><span class="k">\mu</span><span class="p">}</span>(x)<span class="k">\right</span>)
<span class="nt">\end{align*}</span></code></pre></figure> \[\begin{align*} \nabla_{\mu} (\mathbb{E}_{x\sim q_{\mu}} f(x)) = &amp; \nabla_{\mu} \int_x f(x) q_{\mu}(x) dx \\ = &amp; \int_x f(x) (\nabla_{\mu} \log q_{\mu}(x)) q_{\mu}(x) dx \\ = &amp; \mathbb{E}_{x \sim q_{\mu}} \left(f(x) \nabla_{\mu} \log q_{\mu}(x)\right) \end{align*}\] <p>This is because there is too little spacing after the <code class="language-plaintext highlighter-rouge">=</code> sign on each line, which feels very cramped. Putting the <code class="language-plaintext highlighter-rouge">&amp;</code> before the <code class="language-plaintext highlighter-rouge">=</code> is correct:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="nt">\begin{align*}</span>
    <span class="k">\nabla</span><span class="p">_{</span><span class="k">\mu</span><span class="p">}</span> (<span class="k">\mathbb</span><span class="p">{</span>E<span class="p">}_{</span>x<span class="k">\sim</span> q<span class="p">_{</span><span class="k">\mu</span><span class="p">}}</span> f(x)) <span class="p">&amp;</span> = <span class="k">\nabla</span><span class="p">_{</span><span class="k">\mu</span><span class="p">}</span> <span class="k">\int</span><span class="p">_</span>x f(x) q<span class="p">_{</span><span class="k">\mu</span><span class="p">}</span>(x) dx                                     <span class="k">\\</span>
                                                   <span class="p">&amp;</span> =  <span class="k">\int</span><span class="p">_</span>x f(x) (<span class="k">\nabla</span><span class="p">_{</span><span class="k">\mu</span><span class="p">}</span> <span class="k">\log</span> q<span class="p">_{</span><span class="k">\mu</span><span class="p">}</span>(x))  q<span class="p">_{</span><span class="k">\mu</span><span class="p">}</span>(x) dx                 <span class="k">\\</span>
                                                   <span class="p">&amp;</span> = <span class="k">\mathbb</span><span class="p">{</span>E<span class="p">}_{</span>x <span class="k">\sim</span> q<span class="p">_{</span><span class="k">\mu</span><span class="p">}}</span> <span class="k">\left</span>(f(x) <span class="k">\nabla</span><span class="p">_{</span><span class="k">\mu</span><span class="p">}</span> <span class="k">\log</span> q<span class="p">_{</span><span class="k">\mu</span><span class="p">}</span>(x)<span class="k">\right</span>)
<span class="nt">\end{align*}</span></code></pre></figure> \[\begin{align*} \nabla_{\mu} (\mathbb{E}_{x\sim q_{\mu}} f(x)) &amp; = \nabla_{\mu} \int_x f(x) q_{\mu}(x) dx \\ &amp; = \int_x f(x) (\nabla_{\mu} \log q_{\mu}(x)) q_{\mu}(x) dx \\ &amp; = \mathbb{E}_{x \sim q_{\mu}} \left(f(x) \nabla_{\mu} \log q_{\mu}(x)\right) \end{align*}\] <p>The spacing is much more comfortable now.</p> <h2 id="command-mistakes">Command Mistakes</h2> <p>We now look at some mistakes that arise from using the wrong commands.</p> <h3 id="math-operators">Math Operators</h3> <p>Instead of <code class="language-plaintext highlighter-rouge">sin (x)</code> \((sin(x))\) or <code class="language-plaintext highlighter-rouge">log (x)</code> \((log (x))\), use <code class="language-plaintext highlighter-rouge">\sin (x)</code> \((\sin (x))\) and <code class="language-plaintext highlighter-rouge">\log (x)</code> \((\log (x))\). The idea extends to many other common math functions. These are math operators that will de-italicize the commands and also take care of the appropriate math-mode spacing between characters:</p> <table class="table table-sm"> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">O(n log n)</code></td> <td>\(O(n log n)\)</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">O(n \log n)</code></td> <td>\(O(n \log n)\)</td> </tr> </tbody> </table> <p>Many times there is a math operator that you need to use repeatedly, but which does not come out of the box. You can define custom math operators with the <code class="language-plaintext highlighter-rouge">\DeclareMathOperator</code> command. For instance, here are some commonly used in probability:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="k">\DeclareMathOperator*</span><span class="p">{</span><span class="k">\Pr</span><span class="p">}{</span><span class="k">\mathbf</span><span class="p">{</span>Pr<span class="p">}}</span>
<span class="k">\DeclareMathOperator*</span><span class="p">{</span><span class="k">\E</span><span class="p">}{</span><span class="k">\mathbf</span><span class="p">{</span>E<span class="p">}}</span>
<span class="k">\DeclareMathOperator*</span><span class="p">{</span><span class="k">\Ex</span><span class="p">}{</span><span class="k">\mathbf</span><span class="p">{</span>E<span class="p">}}</span>
<span class="k">\DeclareMathOperator*</span><span class="p">{</span><span class="k">\Var</span><span class="p">}{</span><span class="k">\mathbf</span><span class="p">{</span>Var<span class="p">}}</span>
<span class="k">\DeclareMathOperator*</span><span class="p">{</span><span class="k">\Cov</span><span class="p">}{</span><span class="k">\mathbf</span><span class="p">{</span>Cov<span class="p">}}</span>
<span class="k">\DeclareMathOperator*</span><span class="p">{</span><span class="k">\stddev</span><span class="p">}{</span><span class="k">\mathbf</span><span class="p">{</span>stddev<span class="p">}}</span></code></pre></figure> <p>Then you can use it as follows:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="k">\Pr</span> <span class="k">\left</span><span class="na">[ X \geq a \right]</span> <span class="k">\leq</span> <span class="k">\frac</span><span class="p">{</span><span class="k">\Ex</span><span class="na">[X]</span><span class="p">}{</span>a<span class="p">}</span></code></pre></figure> \[\Pr \left[ X \geq a \right] \leq \frac{\Ex[X]}{a}\] <h3 id="double-quotes">Double quotes</h3> <p>This is more of a rookie mistake since it‚Äôs visually very obvious something is wrong. Double quotes don‚Äôt work the way you would expect:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="k">\text</span><span class="p">{</span>"Hello World!"<span class="p">}</span></code></pre></figure> \[\text{"Hello World!"}\] <p>Instead, surround them in double backticks and single quotes, which is supposed to be reminiscent of the directional strokes of an actual double quote. This allows it to know which side to orient the ticks:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex"><span class="k">\text</span><span class="p">{</span>``Hello World!''<span class="p">}</span></code></pre></figure> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/quotes-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/quotes-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/quotes-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/quotes.webp" class="z-depth-1 center" width="100px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Output of correct usage of quotes </figcaption> </figure> <p>Unfortunately I had to demonstrate this with a screenshot since MathJax only performs math-mode typesetting, but this is an instance of text-mode typesetting.</p> <h3 id="epsilons">Epsilons</h3> <p>This is a common mistake due to laziness. Many times, people use <code class="language-plaintext highlighter-rouge">\epsilon</code> (\(\epsilon\)) when they really meant to write <code class="language-plaintext highlighter-rouge">\varepsilon</code> (\(\varepsilon\)). For instance, in analysis this is usually the case, and therefore writing <code class="language-plaintext highlighter-rouge">\epsilon</code> results in a very uncomfortable read:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/epsilon-wrong-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/epsilon-wrong-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/epsilon-wrong-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/epsilon-wrong.webp" class="z-depth-1 center" width="600px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Using "\epsilon" looks weird </figcaption> </figure> <p>Using <code class="language-plaintext highlighter-rouge">\varepsilon</code> makes the reader feel much more at peace:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/epsilon-right-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/epsilon-right-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/epsilon-right-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/epsilon-right.webp" class="z-depth-1 center" width="600px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> "\varepsilon" is usually what should be used </figcaption> </figure> <p>Similarly, people tend to get lazy and mix up <code class="language-plaintext highlighter-rouge">\phi, \Phi, \varphi</code> (\(\phi, \Phi, \varphi\)), since they are ‚Äúabout the same‚Äù. Details matter!</p> <h3 id="sets-mathbbm-instead-of-mathbb">Sets: <code class="language-plaintext highlighter-rouge">mathbbm</code> Instead Of <code class="language-plaintext highlighter-rouge">mathbb</code></h3> <p>For sets like \(\mathbb{N}\), you should use <code class="language-plaintext highlighter-rouge">\mathbbm{N}</code> (from <code class="language-plaintext highlighter-rouge">bbm</code> package) instead of <code class="language-plaintext highlighter-rouge">mathbb{N}</code> (from <code class="language-plaintext highlighter-rouge">amssymb</code>). See the difference in how the rendering of the set of natural numbers \(\mathbb{N}\) differs, using the same example as the previous section:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/mathbbm-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/mathbbm-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/mathbbm-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/mathbbm.webp" class="z-depth-1 center" width="600px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Use `mathbbm` instead of `mathbb` </figcaption> </figure> <p><code class="language-plaintext highlighter-rouge">mathbbm</code> causes the symbols to be bolded, which is what you want.</p> <h3 id="dots">Dots</h3> <p><code class="language-plaintext highlighter-rouge">...</code> and <code class="language-plaintext highlighter-rouge">\dots</code> are different. See the difference:</p> <figure class="highlight"><pre><code class="language-latex" data-lang="latex">X = <span class="k">\left</span>( X<span class="p">_</span>1, ..., X<span class="p">_</span>n <span class="k">\right</span>)
X = <span class="k">\left</span>( X<span class="p">_</span>1, <span class="k">\dots</span>, X<span class="p">_</span>n <span class="k">\right</span>)</code></pre></figure> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/dots-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/dots-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/dots-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/dots.webp" class="z-depth-1 center" width="300px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Output of "..." versus "\dots" </figcaption> </figure> <p>When using ‚Äú‚Ä¶‚Äù, the spacing between each dot, and between the final dot and the comma character is wrong. Always use ‚Äú\dots‚Äù.</p> <h3 id="summation-and-product">Summation and Product</h3> <p>When writing summation or products of terms, use <code class="language-plaintext highlighter-rouge">\sum</code> and <code class="language-plaintext highlighter-rouge">\prod</code> instead of <code class="language-plaintext highlighter-rouge">\Sigma</code> and <code class="language-plaintext highlighter-rouge">\Pi</code>. This helps to handle the relative positioning of the limits properly, and is much more idiomatic to read from the raw script:</p> <table class="table table-bordered table-sm"> <thead> <tr> <th>Raw LaTeX</th> <th>Rendered</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">\Sigma_{i=1}^n X_i</code></td> <td>\(\Sigma_{i=1}^n X_i\)</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">\sum_{i=1}^n X_i</code></td> <td>\(\sum_{i=1}^n X_i\)</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">\Pi_{i=1}^n X_i</code></td> <td>\(\Pi_{i=1}^n X_i\)</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">\prod_{i=1}^n X_i</code></td> <td>\(\prod_{i=1}^n X_i\)</td> </tr> </tbody> </table> <h3 id="multiplication">Multiplication</h3> <p>To denote multiplication, use <code class="language-plaintext highlighter-rouge">\cdot</code> or <code class="language-plaintext highlighter-rouge">times</code> instead of <code class="language-plaintext highlighter-rouge">*</code>. See the difference below in the equation:</p> <figure> <picture> <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/posts/latex-mistakes/multiplication-480.webp"/> <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/posts/latex-mistakes/multiplication-800.webp"/> <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/posts/latex-mistakes/multiplication-1400.webp"/> <img src="/assets/img/posts/latex-mistakes/multiplication.webp" class="z-depth-1 center" width="600px" height="auto" style="object-fit: cover" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture><figcaption class="caption"> Use "\cdot" looks much better than "*" </figcaption> </figure> <h3 id="mid">Mid</h3> <p>For set builder notation or conditional probability, use <code class="language-plaintext highlighter-rouge">\mid</code> instead of the pipe <code class="language-plaintext highlighter-rouge">|</code>. This helps to handle the spacing between the terms properly:</p> <table class="table table-bordered table-sm"> <thead> <tr> <th>Raw LaTeX</th> <th>Rendered</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">p(\mathbf{z}, \mathbf{x}) = p(\mathbf{z}) p(\mathbf{z} | \mathbf{z})</code></td> <td>\(p(\mathbf{z}, \mathbf{x}) = p(\mathbf{z}) p(\mathbf{z} | \mathbf{z})\)</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">p(\mathbf{z}, \mathbf{x}) = p(\mathbf{z}) p(\mathbf{z} \mid \mathbf{z})</code></td> <td>\(p(\mathbf{z}, \mathbf{x}) = p(\mathbf{z}) p(\mathbf{z} \mid \mathbf{z})\)</td> </tr> </tbody> </table> <h3 id="angle-brackets">Angle Brackets</h3> <p>When writing vectors, use the <code class="language-plaintext highlighter-rouge">\langle</code> and <code class="language-plaintext highlighter-rouge">\rangle</code> instead of the keyboard angle brackets:</p> <table class="table table-bordered table-sm"> <thead> <tr> <th>Raw LaTeX</th> <th>Rendered</th> </tr> </thead> <tbody> <tr> <td><code class="language-plaintext highlighter-rouge">&lt;u, v&gt;</code></td> <td>\(&lt;u, v&gt;\)</td> </tr> <tr> <td><code class="language-plaintext highlighter-rouge">\langle u, v \rangle</code></td> <td>\(\langle u, v \rangle\)</td> </tr> </tbody> </table> <h3 id="labels">Labels</h3> <p>Use <code class="language-plaintext highlighter-rouge">\label</code> to label your figures, equations, tables, and so on, and reference them using <code class="language-plaintext highlighter-rouge">\ref</code>, instead of hardcoding the number. For instance, <code class="language-plaintext highlighter-rouge">\label{fig:myfig}</code> and <code class="language-plaintext highlighter-rouge">\ref{fig:myfig}</code>. Including the type of the object in the tag helps to keep track of what it is and ensures that you are referencing it correctly, i.e making sure you write <code class="language-plaintext highlighter-rouge">Figure \ref{fig:myfig}</code> instead of accidentally saying something like <code class="language-plaintext highlighter-rouge">Table \ref{fig:myfig}</code>.</p> <h2 id="conclusion">Conclusion</h2> <p>That was a lot, and I hope it has been a helpful read! I will continue updating this post in the future as and when I feel like there are other important things which should be noted which I missed.</p>]]></content><author><name></name></author><category term="Articles"/><category term="Notes"/><category term="code"/><category term="general"/><category term="latex"/><summary type="html"><![CDATA[When was the first time you had to use LaTeX? If you are like most people, it was probably suddenly forced upon you during your first math or CS class where you had to start writing proofs, with minimal guidance on how to get started. Unfortunately, this meant that while many people have good operational knowledge of LaTeX, there are still many small mistakes and best practices which are not followed, which are not corrected by TAs as they are either not severe enough to warrant a note, or perhaps even the TAs themselves are not aware of them. In this post, we cover some common mistakes that are made by LaTeX practitioners (even in heavily cited papers), and how to address them.]]></summary></entry><entry><title type="html">Java Collections</title><link href="https://hrishikeshh.github.io/blog/2023/java-collection/" rel="alternate" type="text/html" title="Java Collections"/><published>2023-04-25T14:14:00+00:00</published><updated>2023-04-25T14:14:00+00:00</updated><id>https://hrishikeshh.github.io/blog/2023/java-collection</id><content type="html" xml:base="https://hrishikeshh.github.io/blog/2023/java-collection/"><![CDATA[ <h2 id="collection-vs-collections">Collection v.s. Collections</h2> <ol> <li>Collection is an interface, collections is a class.</li> <li>A Collection interface provides the standard functionality of a data structure to List, Set, and Queue. However, the Collections class provides the utility methods that can be used to search, sort, and synchronize collection elements.</li> </ol> <h2 id="arraylist">ArrayList</h2> <ul> <li>Default size is 10. Java 8 lazy allocation, 0 on creation, resize to 10 on adding.</li> <li>The capacity is checked when added, it reallocate strategy is create (n + (n / 2) + 1).</li> </ul> <h3 id="basic-methods">Basic Methods</h3> <ul> <li><code class="language-plaintext highlighter-rouge">List.add(E e)</code></li> <li><code class="language-plaintext highlighter-rouge">List.add(int index, E e)</code></li> <li><code class="language-plaintext highlighter-rouge">List.addAll(Collection c)</code></li> <li><code class="language-plaintext highlighter-rouge">List.addAll(int index, Collection c)</code></li> <li><code class="language-plaintext highlighter-rouge">List.get(int index)</code></li> <li><code class="language-plaintext highlighter-rouge">List.size()</code></li> <li><code class="language-plaintext highlighter-rouge">List.remove(int index)</code>, e.g. <code class="language-plaintext highlighter-rouge">list.remove(2);</code></li> <li><code class="language-plaintext highlighter-rouge">List.remove(Object o)</code>, e.g. <code class="language-plaintext highlighter-rouge">list.remove(new Integer(2));</code></li> <li><code class="language-plaintext highlighter-rouge">List.removeRange(int fromIndex, int toIndex)</code></li> <li><code class="language-plaintext highlighter-rouge">List.removeAll(Collection&lt;?&gt; c)</code></li> <li><code class="language-plaintext highlighter-rouge">List.clear()</code></li> <li><code class="language-plaintext highlighter-rouge">List.replaceAll(UnaryOperator&lt;E&gt; operator)</code>, e.g. <code class="language-plaintext highlighter-rouge">list.replaceAll((element) -&gt; element.toUpperCase());</code></li> <li><code class="language-plaintext highlighter-rouge">List.set(int index, E e)</code></li> <li><code class="language-plaintext highlighter-rouge">List.contains(Object o)</code></li> <li><code class="language-plaintext highlighter-rouge">List.indexOf(E e)</code></li> <li><code class="language-plaintext highlighter-rouge">List.lastIndexOf(E e)</code></li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayListDemo</span> <span class="o">{</span>
  <span class="nc">List</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
  <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
  <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
  <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

  <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

  <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

  <span class="nc">List</span> <span class="n">newList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
  <span class="n">newList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
  <span class="n">newList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">600</span><span class="o">);</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">newList</span><span class="o">);</span>

  <span class="n">list</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">newList</span><span class="o">);</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

  <span class="n">list</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">newList</span><span class="o">);</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">// output:</span>
<span class="c1">// [1, 2, 3]</span>
<span class="c1">// [1, 2, 3, 4]</span>
<span class="c1">// [1, 50, 2, 3, 4]</span>
<span class="c1">// [1, 50, 2, 3, 4, 150, 160]</span>
<span class="c1">// [1, 150, 160, 50, 2, 3, 4, 150, 160]</span>
</code></pre></div></div> <h3 id="using-an-iterator">Using an Iterator</h3> <ul> <li><code class="language-plaintext highlighter-rouge">Interator&lt;Integer&gt; iter = List.iterator();</code></li> <li><code class="language-plaintext highlighter-rouge">iter.hasNext()</code></li> <li><code class="language-plaintext highlighter-rouge">iter.next()</code></li> <li><code class="language-plaintext highlighter-rouge">iter.remove()</code></li> <li><code class="language-plaintext highlighter-rouge">iter.forEachRemaining(Consumer&lt;? super E&gt; action)</code></li> <li>Once a interator is created, we can not modify the List while interating elements.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>

<span class="c1">// remove a element WRONG WRONG</span>
<span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">next</span> <span class="o">=</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>

  <span class="k">if</span> <span class="o">(</span><span class="n">next</span> <span class="o">==</span> <span class="mi">30</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">new</span> <span class="nc">Integer</span><span class="o">(</span><span class="mi">30</span><span class="o">));</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// CORRECT</span>
<span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">next</span> <span class="o">=</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">next</span> <span class="o">==</span> <span class="mi">30</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">iter</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// add an element WRONG WRONG</span>
<span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
<span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
  <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="using-an-listiterator">Using an ListIterator</h3> <ul> <li><code class="language-plaintext highlighter-rouge">ListIterator&lt;Integer&gt; listIterator = list.ListIterator();</code></li> <li><code class="language-plaintext highlighter-rouge">List.hasNext();</code></li> <li><code class="language-plaintext highlighter-rouge">List.next();</code></li> <li><code class="language-plaintext highlighter-rouge">List.hasPrevious();</code></li> <li><code class="language-plaintext highlighter-rouge">List.previous();</code></li> <li><code class="language-plaintext highlighter-rouge">List.nextIndex();</code></li> <li><code class="language-plaintext highlighter-rouge">List.previousIndex();</code></li> <li><code class="language-plaintext highlighter-rouge">List.remove();</code>, can only be made for each call to <code class="language-plaintext highlighter-rouge">next()</code> or <code class="language-plaintext highlighter-rouge">previous()</code>.</li> <li><code class="language-plaintext highlighter-rouge">List.set(E e);</code>, replace the element returned by <code class="language-plaintext highlighter-rouge">next()</code> or <code class="language-plaintext highlighter-rouge">previous()</code>.</li> <li><code class="language-plaintext highlighter-rouge">List.add(E e);</code>, add before the element returned by <code class="language-plaintext highlighter-rouge">next()</code>.</li> </ul> <h3 id="sort-arraylist">Sort ArrayList</h3> <ul> <li><code class="language-plaintext highlighter-rouge">Collections.sort(List&lt;T&gt; list)</code>, type <code class="language-plaintext highlighter-rouge">T</code> must implement the <code class="language-plaintext highlighter-rouge">Comparable</code> interface.</li> <li><code class="language-plaintext highlighter-rouge">List&lt;Integer&gt; sortedList = list.stream().sorted().collect(Collectors.toList());</code>, Java 8.</li> <li><code class="language-plaintext highlighter-rouge">Collections.sort(list, Collections.reverseOrder());</code></li> <li><code class="language-plaintext highlighter-rouge">List&lt;Integer&gt; sortedList = list.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());</code>, Java 8.</li> </ul> <h3 id="comparable-interface">Comparable Interface</h3> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Vehicle</span> <span class="kd">implements</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">Vehicle</span><span class="o">&gt;</span> <span class="o">{</span>

  <span class="nc">String</span> <span class="n">brand</span><span class="o">;</span>
  <span class="nc">Integer</span> <span class="n">makeYear</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">Vehicle</span><span class="o">(</span><span class="nc">String</span> <span class="n">brand</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">makeYear</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">();</span>
    <span class="k">this</span><span class="o">.</span><span class="na">brand</span> <span class="o">=</span> <span class="n">brand</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">makeYear</span> <span class="o">=</span> <span class="n">makeYear</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Vehicle</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">makeYear</span> <span class="o">-</span> <span class="n">o</span><span class="o">.</span><span class="na">makeYear</span><span class="o">;</span>
    <span class="c1">// We can also use the compareTo() method of the Integer class.</span>
    <span class="c1">//return this.makeYear.compareTo(o.makeYear);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <h3 id="comparator-interface">Comparator Interface</h3> <ul> <li><code class="language-plaintext highlighter-rouge">Collections.sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</code>.</li> <li>Comparator interface has a method, <code class="language-plaintext highlighter-rouge">compare(T o1, T o2)</code>.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// BrandComparator.java</span>
<span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BrandComparator</span> <span class="kd">implements</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">Vehicle</span><span class="o">&gt;</span> <span class="o">{</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">Vehicle</span> <span class="n">o1</span><span class="o">,</span> <span class="nc">Vehicle</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">o1</span><span class="o">.</span><span class="na">brand</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">o2</span><span class="o">.</span><span class="na">brand</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// use the comparator in code</span>
<span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="k">new</span> <span class="nc">BrandComparator</span><span class="o">());</span>

<span class="c1">// alternatively use anonymous comparator class</span>
<span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">Vehicle</span><span class="o">&gt;()</span> <span class="o">{</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">Vehicle</span> <span class="n">o1</span><span class="o">,</span> <span class="nc">Vehicle</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">o1</span><span class="o">.</span><span class="na">brand</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">o2</span><span class="o">.</span><span class="na">brand</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">});</span>

<span class="c1">// Use Java 8 lambda comparator (functional style)</span>
<span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">o1</span><span class="o">.</span><span class="na">brand</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">o2</span><span class="o">.</span><span class="na">brand</span><span class="o">));</span>
</code></pre></div></div> <h2 id="linkedlist">LinkedList</h2> <p><img src="/assets/img/java/linkedlist-class.png" alt="LinkedList Class"/></p> <ul> <li>LinkedList class implement both the <code class="language-plaintext highlighter-rouge">List</code> and <code class="language-plaintext highlighter-rouge">Deque</code> interfaces.</li> <li> <p>LinkedList definition</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">E</span> <span class="n">item</span><span class="o">;</span>
    <span class="nc">Node</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">;</span>
    <span class="nc">Node</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">prev</span><span class="o">;</span>

    <span class="nc">Node</span><span class="o">(</span><span class="nc">Node</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">prev</span><span class="o">,</span> <span class="no">E</span> <span class="n">element</span><span class="o">,</span> <span class="nc">Node</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">next</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">item</span> <span class="o">=</span> <span class="n">element</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="c1">// construct a LinkedList</span>
  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>

  <span class="c1">// construct a LinkedList with existing list</span>
  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;(</span><span class="n">oldList</span><span class="o">);</span>
</code></pre></div> </div> </li> <li><code class="language-plaintext highlighter-rouge">LinkedList</code> operation methods</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// add elements</span>
<span class="nc">LinkedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>
<span class="nc">LinkedList</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>
<span class="nc">LinkedList</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>
<span class="nc">LinkedList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="no">E</span> <span class="n">e</span><span class="o">)</span>
<span class="nc">LinkedList</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="nc">Collection</span> <span class="n">c</span><span class="o">)</span>
<span class="nc">LinkedList</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="nc">Collection</span> <span class="n">c</span><span class="o">)</span>

<span class="c1">// fetch elements</span>
<span class="nc">LinkedList</span><span class="o">.</span><span class="na">getFirst</span><span class="o">()</span>
<span class="nc">LinkedList</span><span class="o">.</span><span class="na">getLast</span><span class="o">()</span>
<span class="nc">LinkedList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span>

<span class="c1">// remove elements</span>
<span class="nc">LinkedList</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">()</span>
<span class="nc">LinkedList</span><span class="o">.</span><span class="na">removeLast</span><span class="o">()</span>
<span class="nc">LinkedList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span>
<span class="nc">LinkedList</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="nc">Object</span> <span class="mi">0</span><span class="o">)</span>

<span class="c1">// sorting</span>
<span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">linkedList</span><span class="o">);</span>
</code></pre></div></div> <h2 id="copyonwritearraylist">CopyOnWriteArrayList</h2> <ul> <li> <p>creating a <code class="language-plaintext highlighter-rouge">CopyOnWriteArrayList</code></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">private</span> <span class="kd">transient</span> <span class="kd">volatile</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">array</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">CopyOnWriteArrayList</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">setArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
  <span class="o">}</span>

  <span class="kd">final</span> <span class="kt">void</span> <span class="nf">setArray</span><span class="o">(</span><span class="nc">Object</span><span class="o">[]</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">array</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nc">List</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CopyOnWriteArrayList</span><span class="o">();</span>

  <span class="c1">// using an existing array</span>
  <span class="kd">public</span> <span class="nf">CopyOnWriteArrayList</span><span class="o">(</span><span class="no">E</span><span class="o">[]</span> <span class="n">toCopyIn</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">setArray</span><span class="o">(</span><span class="nc">Array</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">toCopyin</span><span class="o">,</span> <span class="n">toCopyIn</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[].</span><span class="na">class</span><span class="o">));</span>
  <span class="o">}</span>
</code></pre></div> </div> </li> <li> <p>inserting elements into a <code class="language-plaintext highlighter-rouge">CopyOnWriteArrayList</code></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">CopyOnWriteArrayList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>
  <span class="nc">CopyOnWriteArrayList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="no">E</span> <span class="n">element</span><span class="o">)</span>
  <span class="nc">CopyOnWriteArrayList</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="nc">Collection</span> <span class="n">c</span><span class="o">)</span>
  <span class="nc">CopyOnWriteArrayList</span><span class="o">.</span><span class="na">addIfAbsent</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>
  <span class="nc">CopyOnWriteArrayList</span><span class="o">.</span><span class="na">addAllAbsent</span><span class="o">(</span><span class="nc">Collection</span> <span class="n">c</span><span class="o">)</span>
</code></pre></div> </div> </li> </ul> <h3 id="copyonwritearraylist-internal">CopyOnWriteArrayList internal</h3> <ul> <li>Using a reentrant lock <code class="language-plaintext highlighter-rouge">final transient ReentrantLock lock = new ReentrantLock();</code></li> <li><strong>Steps:</strong> writing thread aquire the by <code class="language-plaintext highlighter-rouge">lock.lock()</code>; make a copy of the data with size of <code class="language-plaintext highlighter-rouge">length + 1</code>; add the element at the end of the copied data; point to the new data; release the lock.</li> </ul> <h3 id="interation">Interation</h3> <ul> <li>Using <code class="language-plaintext highlighter-rouge">forEach(Consumer&lt;? super E&gt; action)</code>.</li> <li> <p>Using <code class="language-plaintext highlighter-rouge">iterator()</code>. No synchronization is needed while traversing the iterator because the iteration is being done on a snapshot.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">java.util.concurrent.CopyOnWriteArrayList</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CopyOnWriteArrayListDemo</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
      <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CopyOnWriteArrayList</span><span class="o">&lt;&gt;();</span>
      <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">);</span>
      <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Banana"</span><span class="o">);</span>
      <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Orange"</span><span class="o">);</span>

      <span class="c1">//Created an iterator</span>
      <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
      <span class="c1">//Adding elements after creating iterator. ConcurrentModificationException will not be thrown.</span>
      <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Papaya"</span><span class="o">);</span>

      <span class="c1">//Iterating the list through the iterator that was created earlier. Papaya will not be present.</span>
      <span class="k">while</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
      <span class="o">}</span>

      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Again getting the iterator"</span><span class="o">);</span>
      <span class="c1">//Again creating the iterator. This time papaya will be present.</span>
      <span class="n">itr</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
      <span class="k">while</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div> </div> </li> <li> <p><code class="language-plaintext highlighter-rouge">iterator()</code> of <code class="language-plaintext highlighter-rouge">CopyOnWriteArrayList</code> class doesn‚Äôt support <code class="language-plaintext highlighter-rouge">remove()</code> method. We can directly remove a element while iterating throught the list.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">java.util.concurrent.CopyOnWriteArrayList</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CopyOnWriteArrayListDemo</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
      <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CopyOnWriteArrayList</span><span class="o">&lt;&gt;();</span>
      <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">);</span>
      <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Banana"</span><span class="o">);</span>
      <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Orange"</span><span class="o">);</span>

      <span class="c1">//Created an iterator</span>
      <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>

      <span class="k">while</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
        <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="s">"Orange"</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Again creating the iterator"</span><span class="o">);</span>
      <span class="c1">//Created an iterator</span>
      <span class="n">itr</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>

      <span class="k">while</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>

      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div> </div> </li> </ul> <h2 id="sets">Sets</h2> <ul> <li>Creating a HashSet <code class="language-plaintext highlighter-rouge">Set&lt;Integer&gt; set = new HashSet&lt;&gt;();</code>.</li> <li> <p>Operations</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>
  <span class="nc">Set</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>
  <span class="nc">Set</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="c1">// return true if element in the set, false if not in the set.</span>
  <span class="nc">Set</span><span class="o">.</span><span class="na">clear</span><span class="o">()</span>
  <span class="nc">Set</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span>
</code></pre></div> </div> </li> <li>Iterate a <code class="language-plaintext highlighter-rouge">Set</code>, using <code class="language-plaintext highlighter-rouge">for</code> loop, <code class="language-plaintext highlighter-rouge">Iterator</code>, and <code class="language-plaintext highlighter-rouge">forEach()</code>.</li> <li><code class="language-plaintext highlighter-rouge">HashSet</code> is not ordered, it can not be sorted.</li> </ul> <h2 id="treeset">TreeSet</h2> <p><img src="/assets/img/java/treeset-hierarchy.png" alt="TreeSet Hierarchy"/></p> <ul> <li><code class="language-plaintext highlighter-rouge">TreeSet</code> doesn‚Äôt allow duplicate elements.</li> <li><code class="language-plaintext highlighter-rouge">TreeSet</code> doesn‚Äôt allow null elements.</li> <li><code class="language-plaintext highlighter-rouge">TreeSet</code> store elements in ascending order.</li> <li><code class="language-plaintext highlighter-rouge">HashSet</code> V.S. <code class="language-plaintext highlighter-rouge">TreeSet</code> <ul> <li>allow null values v.s. not allow null values.</li> <li>random order v.s. sorted</li> <li>HashSet is faster for <code class="language-plaintext highlighter-rouge">add</code>, <code class="language-plaintext highlighter-rouge">remove</code>, <code class="language-plaintext highlighter-rouge">contains</code>, <code class="language-plaintext highlighter-rouge">size</code>, etc.</li> </ul> </li> <li> <p>Creating a <code class="language-plaintext highlighter-rouge">TreeSet</code>. <code class="language-plaintext highlighter-rouge">TreeSet</code> internally uses <code class="language-plaintext highlighter-rouge">TreeMap</code>.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeSet</span><span class="o">&lt;&gt;();</span>

  <span class="c1">// use a comparator in the constructor</span>
  <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">comp</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span> <span class="n">o1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">o2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">o2</span><span class="o">));</span>
  <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">treeset</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeSet</span><span class="o">&lt;&gt;(</span><span class="n">comp</span><span class="o">);</span>
</code></pre></div> </div> </li> <li>Add element to <code class="language-plaintext highlighter-rouge">TreeSet</code>. <code class="language-plaintext highlighter-rouge">TreeSet.Add(E e)</code> or <code class="language-plaintext highlighter-rouge">TreeSet.AddAll(Collection&lt;&gt; c)</code>.</li> <li>get element from a <code class="language-plaintext highlighter-rouge">TreeSet</code>.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// get elements</span>
<span class="nc">TreeSet</span><span class="o">.</span><span class="na">first</span><span class="o">();</span>
<span class="nc">TreeSet</span><span class="o">.</span><span class="na">last</span><span class="o">();</span>
<span class="nc">TreeSet</span><span class="o">.</span><span class="na">subSet</span><span class="o">(</span><span class="no">E</span> <span class="n">fromElement</span><span class="o">,</span> <span class="no">E</span> <span class="n">toElement</span><span class="o">);</span> <span class="c1">// return a range of element</span>
<span class="nc">TreeSet</span><span class="o">.</span><span class="na">headSet</span><span class="o">(</span><span class="no">E</span> <span class="n">toElement</span><span class="o">);</span>   <span class="c1">// return all the smaller elements than toElement</span>
<span class="nc">TreeSet</span><span class="o">.</span><span class="na">tailSet</span><span class="o">(</span><span class="no">E</span> <span class="n">fromElement</span><span class="o">);</span> <span class="c1">// return all the elements which are greater than fromElement</span>

<span class="c1">// remove an element</span>
<span class="nc">TreeSet</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">);</span>
<span class="nc">TreeSet</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
<span class="nc">TreeSet</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
<span class="nc">TreeSet</span><span class="o">.</span><span class="na">size</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">);</span>
</code></pre></div></div> <h2 id="hashmap">HashMap</h2> <ul> <li> <p>Creation and insertion</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

  <span class="nc">HashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="no">K</span> <span class="n">key</span><span class="o">,</span> <span class="no">V</span> <span class="n">value</span><span class="o">);</span>
  <span class="nc">HashMap</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="no">K</span> <span class="n">key</span><span class="o">,</span> <span class="no">V</span> <span class="n">value</span><span class="o">);</span>
  <span class="nc">HashMap</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">K</span><span class="o">,</span> <span class="o">?</span> <span class="kd">extends</span> <span class="no">V</span><span class="o">&gt;</span> <span class="n">m</span><span class="o">);</span>
</code></pre></div> </div> </li> <li> <p>Update and removal</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">HashMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="nc">Object</span> <span class="n">key</span><span class="o">);</span>
  <span class="nc">HashMap</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="nc">Object</span> <span class="n">key</span><span class="o">,</span> <span class="no">V</span> <span class="n">defaultValue</span><span class="o">);</span>
</code></pre></div> </div> </li> <li> <p>Replacing a value in HashMap</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">HashMap</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="no">K</span> <span class="n">key</span><span class="o">,</span> <span class="no">V</span> <span class="n">oldValue</span><span class="o">,</span> <span class="no">V</span> <span class="n">newValue</span><span class="o">);</span>
  <span class="nc">HashMap</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="no">K</span> <span class="n">key</span><span class="o">,</span> <span class="no">V</span> <span class="n">value</span><span class="o">);</span>
  <span class="nc">HashMap</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="nc">BiFunction</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">K</span><span class="o">,</span> <span class="o">?</span> <span class="kd">super</span> <span class="no">V</span><span class="o">,</span> <span class="o">?</span> <span class="kd">extends</span> <span class="no">V</span><span class="o">&gt;</span> <span class="n">function</span><span class="o">);</span>
</code></pre></div> </div> </li> <li> <p>Removing an element from HashMap</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">HashMap</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="nc">Object</span> <span class="n">key</span><span class="o">);</span> <span class="c1">// return the value being removed.</span>
  <span class="nc">HashMap</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="nc">Object</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">);</span> <span class="c1">// return true if the key-value pair are matching and removed.</span>
</code></pre></div> </div> </li> <li> <p>Check presence</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">HashMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="nc">Object</span> <span class="n">key</span><span class="o">);</span>
  <span class="nc">HashMap</span><span class="o">.</span><span class="na">containsValue</span><span class="o">(</span><span class="nc">Object</span> <span class="n">value</span><span class="o">);</span>
</code></pre></div> </div> </li> <li>fetch all keys <code class="language-plaintext highlighter-rouge">HashMap.keySet()</code>.</li> <li>fetch all values <code class="language-plaintext highlighter-rouge">HashMap.values()</code>;</li> <li>check empty <code class="language-plaintext highlighter-rouge">HashMap.isEmpty()</code>;</li> <li> <p>Java 8 addition <code class="language-plaintext highlighter-rouge">HashMap.compute(K key, BiFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction)</code>.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">HashMap</span><span class="o">.</span><span class="na">compute</span><span class="o">(</span><span class="s">"China"</span><span class="o">,</span> <span class="o">(</span><span class="no">K</span><span class="o">,</span> <span class="n">v</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">v</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="mi">10</span> <span class="o">:</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
  <span class="nc">HashMap</span><span class="o">.</span><span class="na">computeIfAbsent</span><span class="o">(</span><span class="s">"China"</span><span class="o">,</span> <span class="o">(</span><span class="no">K</span><span class="o">,</span> <span class="n">v</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">v</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="mi">10</span> <span class="o">:</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// for key is absent or key is null</span>
  <span class="nc">HashMap</span><span class="o">.</span><span class="na">computeIfPresent</span><span class="o">(</span><span class="s">"China"</span><span class="o">,</span> <span class="o">(</span><span class="no">K</span><span class="o">,</span> <span class="n">v</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">v</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="mi">10</span> <span class="o">:</span> <span class="n">v</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">// for key is absent or key is null</span>
  <span class="nc">HashMap</span><span class="o">.</span><span class="na">merge</span><span class="o">()</span>
</code></pre></div> </div> </li> <li> <p>use of <code class="language-plaintext highlighter-rouge">HashMap.merge();</code></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashMapDemo</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>

      <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
      <span class="n">map1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Jay"</span><span class="o">,</span> <span class="mi">5000</span><span class="o">);</span>
      <span class="n">map1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Rahul"</span><span class="o">,</span> <span class="mi">3000</span><span class="o">);</span>
      <span class="n">map1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Nidhi"</span><span class="o">,</span> <span class="mi">4500</span><span class="o">);</span>
      <span class="n">map1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Amol"</span><span class="o">,</span> <span class="mi">60000</span><span class="o">);</span>

      <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
      <span class="n">map2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Jay"</span><span class="o">,</span> <span class="mi">7000</span><span class="o">);</span>
      <span class="n">map2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Rahul"</span><span class="o">,</span> <span class="mi">4500</span><span class="o">);</span>
      <span class="n">map2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Nidhi"</span><span class="o">,</span> <span class="mi">1200</span><span class="o">);</span>
      <span class="n">map2</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Saurav"</span><span class="o">,</span> <span class="mi">25000</span><span class="o">);</span>

      <span class="n">map1</span><span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">key</span><span class="o">,</span><span class="n">value</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">map2</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="o">(</span><span class="n">v1</span><span class="o">,</span> <span class="n">v2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">v1</span> <span class="o">+</span> <span class="n">v2</span><span class="o">));</span>

      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map2</span><span class="o">);</span>

    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div> </div> </li> <li>Design good key for <code class="language-plaintext highlighter-rouge">HashMap</code>. We need to follow the <code class="language-plaintext highlighter-rouge">equals</code> and <code class="language-plaintext highlighter-rouge">hashcode</code> contracts. <ul> <li>If two objects are equal, then they must have the same hash code.</li> <li>If two objects have the same hashcode, they may or may not be equal.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>

      <span class="kt">int</span> <span class="n">empId</span><span class="o">;</span>
      <span class="nc">String</span> <span class="n">empName</span><span class="o">;</span>

      <span class="kd">public</span> <span class="nf">Employee</span><span class="o">(</span><span class="kt">int</span> <span class="n">empId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">empName</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">empId</span> <span class="o">=</span> <span class="n">empId</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">empName</span> <span class="o">=</span> <span class="n">empName</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">final</span> <span class="kt">int</span> <span class="n">prime</span> <span class="o">=</span> <span class="mi">31</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">empId</span><span class="o">;</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="o">((</span><span class="n">empName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">empName</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
      <span class="o">}</span>

      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Employee</span> <span class="n">emp</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Employee</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">empId</span> <span class="o">==</span> <span class="n">emp</span><span class="o">.</span><span class="na">empId</span><span class="o">;</span>
      <span class="o">}</span>

    <span class="o">}</span>

    <span class="c1">// main class</span>
    <span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.util.Map.Entry</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashMapDemo</span> <span class="o">{</span>

      <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>

        <span class="nc">Employee</span> <span class="n">emp1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Employee</span><span class="o">(</span><span class="mi">123</span><span class="o">,</span> <span class="s">"Jane"</span><span class="o">);</span>
        <span class="nc">Employee</span> <span class="n">emp2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Employee</span><span class="o">(</span><span class="mi">123</span><span class="o">,</span> <span class="s">"Jane"</span><span class="o">);</span>

        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Employee</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">employeeMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

        <span class="n">employeeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">emp1</span><span class="o">,</span> <span class="mi">56000</span><span class="o">);</span>
        <span class="n">employeeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">emp2</span><span class="o">,</span> <span class="mi">45000</span><span class="o">);</span>

        <span class="k">for</span><span class="o">(</span><span class="nc">Entry</span><span class="o">&lt;</span><span class="nc">Employee</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">employeeMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Employee Id: "</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">empId</span> <span class="o">+</span> <span class="s">" Employee Name: "</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">empName</span><span class="o">);</span>
        <span class="o">}</span>

      <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div> </div> </li> <li> <p>Iterate a <code class="language-plaintext highlighter-rouge">HashMap</code></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="o">...</span>
  <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">entrySet</span> <span class="o">=</span> <span class="n">stockPrice</span><span class="o">.</span><span class="na">entrySet</span><span class="o">();</span> <span class="c1">// Returns a Set of Entries</span>

  <span class="k">for</span> <span class="o">(</span><span class="nc">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">entrySet</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Company Name: "</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()</span> <span class="o">+</span> <span class="s">" Stock Price: "</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
  <span class="o">}</span>
  <span class="o">...</span>

  <span class="o">...</span>
  <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">entrySet</span> <span class="o">=</span> <span class="n">stockPrice</span><span class="o">.</span><span class="na">entrySet</span><span class="o">();</span> <span class="c1">// Returns a Set of Entries</span>

  <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">entrySet</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="c1">//Getting the iterator</span>

  <span class="k">while</span> <span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">itr</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Company Name: "</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()</span> <span class="o">+</span> <span class="s">" Stock Price: "</span> <span class="o">+</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>

    <span class="k">if</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"Oracle"</span><span class="o">))</span> <span class="o">{</span>
      <span class="n">itr</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
  <span class="o">}</span>
  <span class="o">...</span>

  <span class="o">...</span>
  <span class="n">stockPrice</span><span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Company Name: "</span> <span class="o">+</span> <span class="n">key</span> <span class="o">+</span> <span class="s">" Stock Price: "</span> <span class="o">+</span> <span class="n">value</span><span class="o">));</span>
  <span class="o">...</span>
</code></pre></div> </div> </li> </ul> <h2 id="treemap">TreeMap</h2> <p><img src="/assets/img/java/treemap.png" alt="TreeMap"/></p> <ul> <li>natrually sorted by keys</li> <li>doesn‚Äôt allow null key</li> <li>not thread-safe, can be made thread-safe by using the <code class="language-plaintext highlighter-rouge">synchronizedMap()</code>.</li> </ul> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.TreeMap</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TreeMapDemo</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>

    <span class="c1">// Creating a TreeMap which will store all the elements in reverse order.</span>
    <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">reverseMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;(</span><span class="nc">Comparator</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
    <span class="n">reverseMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Oracle"</span><span class="o">,</span> <span class="mi">43</span><span class="o">);</span>
    <span class="n">reverseMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Microsoft"</span><span class="o">,</span> <span class="mi">56</span><span class="o">);</span>
    <span class="n">reverseMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">,</span> <span class="mi">43</span><span class="o">);</span>
    <span class="n">reverseMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Novartis"</span><span class="o">,</span> <span class="mi">87</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Elements are stored in reverse order: "</span> <span class="o">+</span> <span class="n">reverseMap</span><span class="o">);</span>

    <span class="c1">// Creating a HashMap which will store all the elements in random order.</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">hashMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="n">hashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Oracle"</span><span class="o">,</span> <span class="mi">43</span><span class="o">);</span>
    <span class="n">hashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Microsoft"</span><span class="o">,</span> <span class="mi">56</span><span class="o">);</span>
    <span class="n">hashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">,</span> <span class="mi">43</span><span class="o">);</span>
    <span class="n">hashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Novartis"</span><span class="o">,</span> <span class="mi">87</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Elements are stored in random order: "</span> <span class="o">+</span> <span class="n">hashMap</span><span class="o">);</span>

    <span class="c1">// Creating a TreeMap using existing HashMap. This will store the elements in ascending order.</span>
    <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">treeMap1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;(</span><span class="n">hashMap</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Elements are stored in ascending order: "</span> <span class="o">+</span> <span class="n">treeMap1</span><span class="o">);</span>

    <span class="c1">// Creating a TreeMap using existing TreeMap. This will store the elements in the same order as it was in the passed Map.</span>
    <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">treeMap2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;(</span><span class="n">reverseMap</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Elements are stored in descending order: "</span> <span class="o">+</span> <span class="n">treeMap2</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div> <ul> <li> <p>inserting element in a TreeMap</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">TreeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="no">K</span> <span class="n">key</span><span class="o">,</span> <span class="no">V</span> <span class="n">value</span><span class="o">);</span>
  <span class="nc">TreeMap</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">K</span><span class="o">,</span> <span class="o">?</span> <span class="kd">extends</span> <span class="no">V</span><span class="o">&gt;</span> <span class="n">m</span><span class="o">);</span>
  <span class="nc">TreeMap</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">);</span>  <span class="err">#</span> <span class="k">return</span> <span class="kc">null</span> <span class="k">if</span> <span class="n">key</span> <span class="n">is</span> <span class="n">not</span> <span class="n">presented</span><span class="o">.</span>
  <span class="nc">TreeMap</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="no">K</span> <span class="n">key</span> <span class="o">,</span> <span class="no">V</span> <span class="n">value</span><span class="o">);</span>
  <span class="nc">TreeMap</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="no">K</span> <span class="n">key</span> <span class="o">,</span> <span class="no">V</span> <span class="n">oldValue</span><span class="o">,</span> <span class="no">V</span> <span class="n">newValue</span><span class="o">);</span>  <span class="err">#</span> <span class="k">return</span> <span class="kc">true</span> <span class="n">or</span> <span class="kc">false</span>
</code></pre></div> </div> </li> <li> <p>sort a <code class="language-plaintext highlighter-rouge">TreeMap</code> by value.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">java.util.TreeMap</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">TreeMapDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">sortByValuesLambda</span><span class="o">(</span><span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>

      <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">valueComparator</span> <span class="o">=</span> <span class="o">(</span><span class="n">k1</span><span class="o">,</span> <span class="n">k2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>

        <span class="kt">int</span> <span class="n">comp</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k1</span><span class="o">).</span><span class="na">compareTo</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k2</span><span class="o">));</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">comp</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
          <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">else</span>
          <span class="k">return</span> <span class="n">comp</span><span class="o">;</span>
      <span class="o">};</span>

      <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">mapSortedByValues</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;(</span><span class="n">valueComparator</span><span class="o">);</span>

      <span class="n">mapSortedByValues</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
      <span class="k">return</span> <span class="n">mapSortedByValues</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">sortByValues</span><span class="o">(</span><span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>

      <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">valueComparator</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;()</span> <span class="o">{</span>

              <span class="c1">// return comparison results of values of two keys</span>
              <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">String</span> <span class="n">k1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">k2</span><span class="o">)</span>
              <span class="o">{</span>
                  <span class="kt">int</span> <span class="n">comp</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k1</span><span class="o">).</span><span class="na">compareTo</span><span class="o">(</span>
                      <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k2</span><span class="o">));</span>
                  <span class="k">if</span> <span class="o">(</span><span class="n">comp</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
                      <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
                  <span class="k">else</span>
                      <span class="k">return</span> <span class="n">comp</span><span class="o">;</span>
              <span class="o">}</span>

          <span class="o">};</span>

      <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">mapSortedByValues</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;(</span><span class="n">valueComparator</span><span class="o">);</span>

      <span class="n">mapSortedByValues</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
      <span class="k">return</span> <span class="n">mapSortedByValues</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>

      <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;();</span>
      <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Oracle"</span><span class="o">,</span> <span class="mi">43</span><span class="o">);</span>
      <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Microsoft"</span><span class="o">,</span> <span class="mi">56</span><span class="o">);</span>
      <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">,</span> <span class="mi">76</span><span class="o">);</span>
      <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Novartis"</span><span class="o">,</span> <span class="mi">87</span><span class="o">);</span>
      <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Google"</span><span class="o">,</span> <span class="mi">23</span><span class="o">);</span>
      <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"Audi"</span><span class="o">,</span> <span class="mi">101</span><span class="o">);</span>

      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sortByValues</span><span class="o">(</span><span class="n">map</span><span class="o">));</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div> </div> </li> <li> <p>HashMap Sorting</p> <ul> <li> <p>add all element to a TreeMap</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">employeeMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
  <span class="n">employeeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">123</span><span class="o">,</span> <span class="s">"Joe"</span><span class="o">);</span>
  <span class="n">employeeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">456</span><span class="o">,</span> <span class="s">"Ann"</span><span class="o">);</span>
  <span class="nc">TreeMap</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">employeeTreeMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;();</span>
  <span class="n">employeeTreeMap</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">employeeMap</span><span class="o">);</span>
</code></pre></div> </div> </li> <li> <p>add all keys (or values) to a <code class="language-plaintext highlighter-rouge">ArrayList</code> and sort.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">employeeMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
  <span class="n">employeeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">123</span><span class="o">,</span> <span class="s">"Joe"</span><span class="o">);</span>
  <span class="n">employeeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">456</span><span class="o">,</span> <span class="s">"Ann"</span><span class="o">);</span>

  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">keyList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">employeeMap</span><span class="o">.</span><span class="na">keySet</span><span class="o">()):</span>
  <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">keyList</span><span class="o">);</span>

  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">valueList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">employeeMap</span><span class="o">.</span><span class="na">valueSet</span><span class="o">()):</span>
  <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">valueList</span><span class="o">);</span>
</code></pre></div> </div> </li> <li> <p>Using Lambda and streams</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">employeeMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
  <span class="n">employeeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">123</span><span class="o">,</span> <span class="s">"Joe"</span><span class="o">);</span>
  <span class="n">employeeMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">456</span><span class="o">,</span> <span class="s">"Ann"</span><span class="o">);</span>

  <span class="n">employeeMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">()</span>
  <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
  <span class="o">.</span><span class="na">sorted</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">.&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span><span class="n">comparingByKey</span><span class="o">())</span>
  <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

  <span class="n">employeeMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">()</span>
  <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
  <span class="o">.</span><span class="na">sorted</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">.&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span><span class="n">comparingByValue</span><span class="o">())</span>
  <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</code></pre></div> </div> </li> </ul> </li> </ul> <h2 id="linkedhashmap">LinkedHashMap</h2> <p><code class="language-plaintext highlighter-rouge">LinkedHashMap</code> can maintains the insertion order. It is not synchronized.</p> <p><img src="/assets/img/java/linkedhashmap.png" alt="LinkedHashMap"/></p> <ul> <li> <p>creating a <code class="language-plaintext highlighter-rouge">LinkedHashMap</code></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">LinkedHashMap</span><span class="o">();</span>
  <span class="nc">LinkedHashMap</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">);</span> <span class="c1">// capacity should be &gt; 0, otherwise IllegalArgumentException</span>
  <span class="nc">LinkedHashMap</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">,</span> <span class="kt">float</span><span class="o">,</span> <span class="n">loadFactor</span><span class="o">);</span> <span class="c1">// capacity should be &gt; 0, otherwise IllegalArgumentException</span>
  <span class="c1">// accessOrder: true, sorted in order of access; false, sorted in order of insertion.</span>
  <span class="nc">LinkedHashMap</span><span class="o">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="o">,</span> <span class="kt">float</span> <span class="n">loadFactor</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">accessOrder</span><span class="o">);</span>
  <span class="nc">LinkedHashMap</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">K</span><span class="o">,</span> <span class="o">?</span> <span class="kd">extends</span> <span class="no">V</span><span class="o">&gt;</span> <span class="n">m</span><span class="o">);</span>
</code></pre></div> </div> </li> <li> <p>The <code class="language-plaintext highlighter-rouge">LinkedHashMap</code> is using a doubly LinkedList to track the insertion order elements. You can think of them first as a <code class="language-plaintext highlighter-rouge">List</code> structure and then the <code class="language-plaintext highlighter-rouge">Map</code> properties are added such as Hash bucket and chaining to resolve the conflict.</p> </li> </ul> <h2 id="concurrenthashmap">ConcurrentHashMap</h2> <ul> <li><code class="language-plaintext highlighter-rouge">ConcurrentHashMap</code> and <code class="language-plaintext highlighter-rouge">SynchronizedMap</code> <ul> <li>segement of the map is locked v.s. entire map is locked</li> <li>read/write can access the same time v.s. returns interator, fails fast on concurrent modification</li> <li>doesn‚Äôt allow null key v.s. allow only one null key</li> </ul> </li> <li>create a <code class="language-plaintext highlighter-rouge">ConcurrentHashMap</code> <ul> <li>like create other HashMap, with parameters: <code class="language-plaintext highlighter-rouge">apacity</code>, <code class="language-plaintext highlighter-rouge">loadFactor</code>, <code class="language-plaintext highlighter-rouge">aExistingMap</code>.</li> </ul> </li> <li>inserting into the <code class="language-plaintext highlighter-rouge">ConcurrentHashMap</code> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">ConcurrentHashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
  <span class="nc">ConcurrentHashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="no">K</span> <span class="n">key</span><span class="o">,</span> <span class="no">V</span> <span class="n">value</span><span class="o">);</span>
  <span class="nc">ConcurrentHashMap</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="no">K</span> <span class="n">key</span><span class="o">,</span> <span class="no">V</span> <span class="n">value</span><span class="o">);</span>
  <span class="nc">ConcurrentHashMap</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">K</span><span class="o">,</span> <span class="o">?</span> <span class="kd">extends</span> <span class="no">V</span><span class="o">&gt;</span> <span class="n">m</span><span class="o">);</span>
</code></pre></div> </div> </li> </ul> <h2 id="identityhashmap">IdentityHashMap</h2> <ul> <li><code class="language-plaintext highlighter-rouge">IdentityHashMap</code> is reference-equality semantics oriented.</li> <li> <p>A simple example to show how <code class="language-plaintext highlighter-rouge">HashMap</code> and <code class="language-plaintext highlighter-rouge">IdentityHashMap</code> are different.</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">java.util.IdentityHashMap</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

  <span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">empId</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">empName</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Employee</span><span class="o">(</span><span class="kt">int</span> <span class="n">empId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">empName</span><span class="o">)</span> <span class="o">{</span>
      <span class="kd">super</span><span class="o">();</span>
      <span class="k">this</span><span class="o">.</span><span class="na">empId</span> <span class="o">=</span> <span class="n">empId</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">empName</span> <span class="o">=</span> <span class="n">empName</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
      <span class="kd">final</span> <span class="kt">int</span> <span class="n">prime</span> <span class="o">=</span> <span class="mi">31</span><span class="o">;</span>
      <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
      <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="n">empId</span><span class="o">;</span>
      <span class="n">result</span> <span class="o">=</span> <span class="n">prime</span> <span class="o">*</span> <span class="n">result</span> <span class="o">+</span> <span class="o">((</span><span class="n">empName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">empName</span><span class="o">.</span><span class="na">hashCode</span><span class="o">());</span>
      <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">Employee</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Employee</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">empId</span> <span class="o">!=</span> <span class="n">other</span><span class="o">.</span><span class="na">empId</span><span class="o">)</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">empName</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">empName</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
          <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">empName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">empName</span><span class="o">))</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">IdentityHashMapDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>

      <span class="nc">Employee</span> <span class="n">emp1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Employee</span><span class="o">(</span><span class="mi">123</span><span class="o">,</span> <span class="s">"Saurav"</span><span class="o">);</span>
      <span class="nc">Employee</span> <span class="n">emp2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Employee</span><span class="o">(</span><span class="mi">123</span><span class="o">,</span> <span class="s">"Saurav"</span><span class="o">);</span>


      <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Employee</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">hashMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
      <span class="n">hashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">emp1</span><span class="o">,</span> <span class="s">"emp1"</span><span class="o">);</span>
      <span class="n">hashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">emp2</span><span class="o">,</span> <span class="s">"emp2"</span><span class="o">);</span>


      <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Employee</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">identityHashMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IdentityHashMap</span><span class="o">&lt;&gt;();</span>
      <span class="n">identityHashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">emp1</span><span class="o">,</span> <span class="s">"emp1"</span><span class="o">);</span>
      <span class="n">identityHashMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">emp2</span><span class="o">,</span> <span class="s">"emp2"</span><span class="o">);</span>

      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The employee objects in HashMap are:"</span><span class="o">);</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hashMap</span><span class="o">);</span>
      <span class="c1">// Output:</span>
      <span class="c1">// The employee objects in HashMap are:</span>
      <span class="c1">// {Employee@93301da6=emp2}</span>

      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The employee objects in IdentityHashMap are:"</span><span class="o">);</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">identityHashMap</span><span class="o">);</span>
      <span class="c1">// Output:</span>
      <span class="c1">// The employee objects in HashMap are:</span>
      <span class="c1">// {Employee@93301da6=emp2, Employee@93301da6=emp1}</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div> </div> </li> </ul> <h2 id="arrays-class">Arrays Class</h2> <ul> <li> <p><code class="language-plaintext highlighter-rouge">Arrays.binarySearch(int[])</code> to search an <code class="language-plaintext highlighter-rouge">Array of elements</code></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span> <span class="o">=</span> <span class="o">{</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span> <span class="o">};</span>
  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">binarySearch</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">binarySearch</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
</code></pre></div> </div> </li> <li> <p>Search comparable object with <code class="language-plaintext highlighter-rouge">Arrays.binarySearch</code></p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">Employee</span><span class="o">[]</span> <span class="n">employees</span> <span class="o">=</span> <span class="o">{</span> <span class="k">new</span> <span class="nc">Employee</span><span class="o">(</span><span class="mi">123</span><span class="o">,</span> <span class="s">"Jay"</span><span class="o">),</span> <span class="k">new</span> <span class="nc">Employee</span><span class="o">(</span><span class="mi">124</span><span class="o">,</span> <span class="s">"Roy"</span><span class="o">),</span> <span class="k">new</span> <span class="nc">Employee</span><span class="o">(</span><span class="mi">125</span><span class="o">,</span> <span class="s">"Nikki"</span><span class="o">)};</span>
  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">binarySearch</span><span class="o">(</span><span class="n">employees</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Employee</span><span class="o">(</span><span class="mi">124</span><span class="o">,</span> <span class="s">"Roy"</span><span class="o">),</span> <span class="o">(</span><span class="n">emp1</span><span class="o">,</span> <span class="n">emp2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">emp1</span><span class="o">.</span><span class="na">empId</span> <span class="o">-</span> <span class="n">emp2</span><span class="o">.</span><span class="na">empId</span><span class="o">);</span>
</code></pre></div> </div> </li> <li>Sort an Array: <code class="language-plaintext highlighter-rouge">Arrays.sort(array)</code>, <code class="language-plaintext highlighter-rouge">Arrays.sort(array, fromIndex, toIndex)</code></li> <li>Sort an Array in parallel <code class="language-plaintext highlighter-rouge">Arrays.parallelSort()</code>, not always parallel sort.</li> <li> <p>Copy an Array</p> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kt">int</span><span class="o">[]</span> <span class="n">numbers</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">};</span>
  <span class="kt">int</span><span class="o">[]</span> <span class="n">newArray</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="n">numbers</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
  <span class="kt">int</span><span class="o">[]</span> <span class="n">newArray</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOfRange</span><span class="o">(</span><span class="n">numbers</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</code></pre></div> </div> </li> <li>Copy an Array of objects will deep copy, modify the original objects will not change the copied objects.</li> <li><code class="language-plaintext highlighter-rouge">Arrays.asList(Integer[])</code></li> <li><code class="language-plaintext highlighter-rouge">Arrays.equals(Integer[], Integer[])</code></li> <li><code class="language-plaintext highlighter-rouge">Arrays.asList(Integer[], int)</code></li> </ul> <h2 id="collections-class">Collections Class</h2> <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
  <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">34</span><span class="o">);</span>
  <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>

<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
  <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">34</span><span class="o">);</span>
  <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>

<span class="nc">Collections</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
<span class="nc">Collections</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
<span class="nc">Collections</span><span class="o">.</span><span class="na">frequency</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="mi">9</span><span class="o">);</span>
<span class="nc">Collections</span><span class="o">.</span><span class="na">binarySearch</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">(</span><span class="mi">222</span><span class="o">))</span>
<span class="nc">Collections</span><span class="o">.</span><span class="na">copy</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">list2</span><span class="o">);</span> <span class="c1">// requires list.length &gt;= list2.length</span>
<span class="nc">Collections</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>

<span class="c1">// unmodifiable</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">unmodifiableList</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

<span class="c1">// synchronized, not efficient to use in practice</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">unmodifiableList</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">synchronizedList</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Articles"/><category term="Notes"/><category term="code"/><category term="java"/><summary type="html"><![CDATA[A brief reference for Java collections usecases.]]></summary></entry></feed>